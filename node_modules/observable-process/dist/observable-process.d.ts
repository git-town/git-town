/// <reference types="node" />
import * as childProcess from "child_process";
import { SearchableStream } from "./searchable-stream";
/** The options that can be provided to Spawn */
export interface SpawnOptions {
    cwd?: string;
    env?: NodeJS.ProcessEnv;
}
/** starts a new ObservableProcess with the given options */
export declare function createObservableProcess(command: string | string[], args?: SpawnOptions): ObservableProcess;
/** a long-running process whose behavior can be observed at runtime */
export declare class ObservableProcess {
    /** indicates whether the process has stopped running */
    ended: boolean;
    /** the code with which the process has ended */
    exitCode: number | null;
    /** whether the process was manually terminated by the user */
    killed: boolean;
    /** the underlying ChildProcess instance */
    process: childProcess.ChildProcess;
    /** the STDIN stream of the underlying ChildProcess */
    stdin: NodeJS.WritableStream;
    /** searchable STDOUT stream of the underlying ChildProcess */
    stdout: SearchableStream;
    /** searchable STDERR stream of the underlying ChildProcess */
    stderr: SearchableStream;
    /** searchable combined STDOUT and STDERR stream */
    output: SearchableStream;
    /** functions to call when this process ends  */
    private endedListeners;
    constructor(args: {
        runnable: string;
        params: string[];
        cwd: string;
        env: NodeJS.ProcessEnv;
    });
    /** stops the currently running process */
    kill(): Promise<void>;
    /** returns the process ID of the underlying ChildProcess */
    pid(): number;
    /** returns a promise that resolves when the underlying ChildProcess terminates */
    waitForEnd(): Promise<void>;
    /** called when the underlying ChildProcess terminates */
    private onClose;
}
