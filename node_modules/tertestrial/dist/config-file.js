// Generated by LiveScript 1.5.0
var abort, fileType, fs, path, ref$, capitalize, map, objToPairs, removeValue, requireNew, requireYaml, util, ConfigFile, toString$ = {}.toString;
abort = require('./helpers/error-message').abort;
fileType = require('./helpers/file-type');
fs = require('fs');
path = require('path');
ref$ = require('prelude-ls'), capitalize = ref$.capitalize, map = ref$.map, objToPairs = ref$.objToPairs;
removeValue = require('remove-value');
requireNew = require('require-new');
requireYaml = require('require-yaml');
util = require('util');
ConfigFile = (function(){
  ConfigFile.displayName = 'ConfigFile';
  var prototype = ConfigFile.prototype, constructor = ConfigFile;
  function ConfigFile(configPath){
    this.configPath = configPath;
    switch (false) {
    case !!this.exists():
      abort('cannot find configuration file');
    }
    this.actions = this._standardizeActions(
    this.content().actions);
    this._convertRegex(this.actions);
  }
  ConfigFile.prototype.exists = function(){
    try {
      return fs.statSync(this.configPath);
    } catch (e$) {}
  };
  ConfigFile.prototype.content = function(){
    return requireNew(this.configPath);
  };
  ConfigFile.prototype._convertRegex = function(actionSets){
    var i$, len$, actionSet, actionsetName, actions, j$, len1$, action, key, ref$, value;
    for (i$ = 0, len$ = actionSets.length; i$ < len$; ++i$) {
      actionSet = actionSets[i$];
      for (actionsetName in actionSet) {
        actions = actionSet[actionsetName];
        for (j$ = 0, len1$ = actions.length; j$ < len1$; ++j$) {
          action = actions[j$];
          for (key in ref$ = action.match) {
            value = ref$[key];
            action.match[key] = new RegExp(value);
          }
        }
      }
    }
  };
  ConfigFile.prototype._loadInternalAction = function(filename){
    return require(path.join(__dirname, '..', 'actions', filename + ".yml"));
  };
  ConfigFile.prototype._standardizeActions = function(actions){
    switch (toString$.call(actions).slice(8, -1)) {
    case 'String':
      return this._standardizeActions(
      this._loadInternalAction(actions).actions);
    case 'Array':
      return [{
        name: 'default',
        matches: actions
      }];
    case 'Object':
      return map(function(arg$){
        var name, matches;
        name = arg$[0], matches = arg$[1];
        return {
          name: name,
          matches: matches
        };
      })(
      objToPairs(actions));
    default:
      return abort("unknown action type: " + util.inspect(actions, {
        depth: null
      }));
    }
  };
  return ConfigFile;
}());
module.exports = ConfigFile;