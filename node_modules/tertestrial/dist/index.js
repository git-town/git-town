// Generated by LiveScript 1.5.0
var ref$, bold, cyan, dim, chokidar, CommandRunner, docopt, ConfigFile, fs, abort, error, isDuplicate, resetTerminal, runsInForeground, interpret, Liftoff, pkg, path, PipeListener, setupWizard, updateNotifier, x$, Tertestrial;
ref$ = require('chalk'), bold = ref$.bold, cyan = ref$.cyan, dim = ref$.dim;
chokidar = require('chokidar');
CommandRunner = require('./command-runner');
docopt = require('docopt').docopt;
ConfigFile = require('./config-file');
fs = require('fs');
ref$ = require('./helpers/error-message'), abort = ref$.abort, error = ref$.error;
isDuplicate = require('./helpers/is-duplicate-checker');
resetTerminal = require('./helpers/reset-terminal');
runsInForeground = require('./helpers/run-mode-checker');
interpret = require('interpret');
Liftoff = require('liftoff');
pkg = require('../package.json');
path = require('path');
PipeListener = require('./pipe-listener');
setupWizard = require('./setup-wizard');
updateNotifier = require('update-notifier');
updateNotifier({
  pkg: pkg
}).notify();
x$ = Tertestrial = new Liftoff({
  name: 'tertestrial',
  configName: 'tertestrial',
  extensions: interpret.extensions
});
x$.launch({}, function(env){
  var doc, options, config, commandRunner, pipePath, x$, pipeListener;
  doc = "Usage:\n  tertestrial\n  tertestrial (help | setup | version)\n\nSubcommands:\n  help      Show this screen\n  setup     Run a setup wizard to generate a config file\n  version   Show version";
  options = docopt(doc, {
    help: false,
    version: pkg.version
  });
  switch (false) {
  case !options.help:
    return console.log(doc);
  case !options.setup:
    return setupWizard();
  case !options.version:
    return console.log(pkg.version);
  }
  if (isDuplicate()) {
    abort('Tertestrial is already running in the current directory.');
  }
  resetTerminal();
  console.log(dim("Tertestrial server " + pkg.version + "\n"));
  config = new ConfigFile(env.configPath);
  commandRunner = new CommandRunner(config);
  pipePath = path.join(process.cwd(), '.tertestrial.tmp');
  x$ = pipeListener = new PipeListener(pipePath);
  x$.on('command-received', commandRunner.runCommand);
  x$.on('command-parse-error', error);
  x$.on('error', function(err){
    throw new Error(err);
  });
  x$.listen(function(){
    if (runsInForeground()) {
      console.log(bold('ctrl-c') + " to exit");
    } else {
      console.log("to exit, run " + cyan('fg') + ", then hit " + bold('[ctrl-c]') + "\n");
    }
    return console.log('\nrunning');
  });
  chokidar.watch(env.configPath).on('change', function(path){
    resetTerminal();
    console.log('Reloading configuration\n');
    config = new ConfigFile(env.configPath);
    return commandRunner.updateConfig(config);
  });
  return process.on('SIGINT', function(){
    console.log('\n\nSee you next time! :)\n');
    pipeListener.cleanup();
    return process.exit();
  });
});