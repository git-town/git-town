// Generated by LiveScript 1.5.0
var fs, PipeListener, rimraf;
fs = require('fs');
PipeListener = require('./pipe-listener');
rimraf = require('rimraf');
describe('PipeListener', function(){
  return describe('listen', function(){
    beforeEach(function(done){
      var x$;
      rimraf.sync('tmp');
      fs.mkdirSync('tmp');
      x$ = this.pipeListener = new PipeListener('tmp/.tertestrial.tmp');
      x$.listen(done);
      return x$;
    });
    afterEach(function(){
      return this.pipeListener.cleanup();
    });
    context('invalid json', function(){
      beforeEach(function(done){
        var this$ = this;
        this.pipeListener.on('command-parse-error', function(error){
          this$.error = error;
          return done();
        });
        this.pipeListener.on('error', done);
        return fs.appendFile('tmp/.tertestrial.tmp', '{');
      });
      return specify('triggers a command-parse-error event', function(){
        return expect(this.error).to.include("Invalid command: {\nSyntaxError:");
      });
    });
    context('single json command', function(){
      beforeEach(function(done){
        var this$ = this;
        this.pipeListener.on('command-received', function(command){
          this$.command = command;
          return done();
        });
        this.pipeListener.on('error', done);
        return fs.appendFile('tmp/.tertestrial.tmp', '{"a":1}');
      });
      return specify('triggers a command-received event', function(){
        return expect(this.command).to.eql({
          a: 1
        });
      });
    });
    context('leading newline', function(){
      beforeEach(function(done){
        var this$ = this;
        this.pipeListener.on('command-received', function(command){
          this$.command = command;
          return done();
        });
        this.pipeListener.on('error', done);
        return fs.appendFile('tmp/.tertestrial.tmp', '\n{"a":1}');
      });
      return specify('triggers a command-received event', function(){
        return expect(this.command).to.eql({
          a: 1
        });
      });
    });
    context('trailing newline', function(){
      beforeEach(function(done){
        var this$ = this;
        this.pipeListener.on('command-received', function(command){
          this$.command = command;
          return done();
        });
        this.pipeListener.on('error', done);
        return fs.appendFile('tmp/.tertestrial.tmp', '{"a":1}\n');
      });
      return specify('triggers a command-received event', function(){
        return expect(this.command).to.eql({
          a: 1
        });
      });
    });
    return context('multiple json commands', function(){
      beforeEach(function(done){
        var this$ = this;
        this.pipeListener.on('command-received', function(command){
          this$.command = command;
          return done();
        });
        this.pipeListener.on('error', done);
        return fs.appendFile('tmp/.tertestrial.tmp', '{"a":1}\n{"b":2}');
      });
      return specify('triggers a command-received event with just the last command', function(){
        return expect(this.command).to.eql({
          b: 2
        });
      });
    });
  });
});