"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const absolute_file_path_1 = require("../../../filesystem/absolute-file-path");
const ast_node_1 = require("../../standard-AST/ast-node");
const open_node_tracker_1 = require("./open-node-tracker");
suite("OpenTagTracker.close()", function () {
    /** placeholder filename */
    const file = new absolute_file_path_1.AbsoluteFilePath("foo");
    test("closing an open tag", function () {
        const openTags = new open_node_tracker_1.OpenNodeTracker();
        openTags.open({ type: "foo_open" });
        const found = openTags.close({ type: "foo_close" }, file, 12);
        chai_1.assert.equal(found.type, "foo_open");
    });
    test("closing a tag that hasn't been opened", function () {
        const openTags = new open_node_tracker_1.OpenNodeTracker();
        openTags.open(ast_node_1.AstNode.scaffold({ type: "foo_open" }));
        const testFn = () => openTags.close({ type: "other_close" }, file, 12);
        chai_1.assert.throws(testFn, "No opening node 'other_open' found for closing node 'other_close'");
    });
});
test("OpenTagTracker.has()", function () {
    const openTags = new open_node_tracker_1.OpenNodeTracker();
    openTags.open(ast_node_1.AstNode.scaffold({ type: "link_open" }));
    chai_1.assert.isTrue(openTags.has("link_open"));
    chai_1.assert.isFalse(openTags.has("anchor_open"));
});
//# sourceMappingURL=open-node-tracker.test.js.map