"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const ast_node_1 = require("./ast-node");
const ast_node_list_1 = require("./ast-node-list");
test("AstNode.scaffold()", function () {
    const node = ast_node_1.AstNode.scaffold({ type: "heading_open" });
    chai_1.assert.equal(node.type, "heading_open");
});
test("AstNode.endTypeFor()", function () {
    const data = {
        anchor_open: "anchor_close",
        heading_open: "heading_close"
    };
    for (const [input, output] of Object.entries(data)) {
        if (!data.hasOwnProperty(input)) {
            continue;
        }
        const node = ast_node_1.AstNode.scaffold({ type: input });
        chai_1.assert.deepEqual(node.endType(), output);
    }
});
suite("AstNode.getNodesFor()", function () {
    test("flat list", function () {
        const list = new ast_node_list_1.AstNodeList();
        list.push(ast_node_1.AstNode.scaffold({ type: "text", line: 1 }));
        list.push(ast_node_1.AstNode.scaffold({ type: "link_open", line: 2 }));
        list.push(ast_node_1.AstNode.scaffold({ type: "text", line: 3 }));
        list.push(ast_node_1.AstNode.scaffold({ type: "link_close", line: 4 }));
        list.push(ast_node_1.AstNode.scaffold({ type: "text", line: 5 }));
        const nodes = list.getNodesFor(list[1]);
        const lines = nodes.map(node => node.line);
        chai_1.assert.deepEqual(lines, [2, 3, 4]);
    });
    test("nested links in active regions", function () {
        const list = new ast_node_list_1.AstNodeList();
        list.push(ast_node_1.AstNode.scaffold({ type: "text", line: 1 }));
        list.push(ast_node_1.AstNode.scaffold({ type: "link_open", line: 2 }));
        list.push(ast_node_1.AstNode.scaffold({ type: "text", line: 3 }));
        list.push(ast_node_1.AstNode.scaffold({ type: "anchor_open", line: 4 }));
        list.push(ast_node_1.AstNode.scaffold({ type: "text", line: 5 }));
        list.push(ast_node_1.AstNode.scaffold({ type: "anchor_close", line: 6 }));
        list.push(ast_node_1.AstNode.scaffold({ type: "link_close", line: 7 }));
        list.push(ast_node_1.AstNode.scaffold({ type: "text", line: 8 }));
        const nodes = list.getNodesFor(list[1]);
        const lines = nodes.map(node => node.line);
        chai_1.assert.deepEqual(lines, [2, 3, 4, 5, 6, 7]);
    });
});
suite("AstNode.htmlLinkTarget()", function () {
    test("link tags", function () {
        const node = ast_node_1.AstNode.scaffold({
            content: '<a href="http://foo.com">',
            type: "htmltag"
        });
        chai_1.assert.equal(node.htmlLinkTarget(), "http://foo.com", "should return the href content of link tags");
    });
    test("non-link tags", function () {
        const node = ast_node_1.AstNode.scaffold({ type: "htmltag", content: "hello" });
        chai_1.assert.isNull(node.htmlLinkTarget());
    });
    test("anchor tags", function () {
        const node = ast_node_1.AstNode.scaffold({
            content: '<a name="foo">',
            type: "htmltag"
        });
        chai_1.assert.isNull(node.htmlLinkTarget());
    });
});
//# sourceMappingURL=ast-node.test.js.map