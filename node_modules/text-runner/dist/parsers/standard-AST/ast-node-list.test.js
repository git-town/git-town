"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const unprinted_user_error_1 = require("../../errors/unprinted-user-error");
const ast_node_1 = require("./ast-node");
const ast_node_list_1 = require("./ast-node-list");
test("AstNodeList.concat()", function () {
    const list1 = ast_node_list_1.AstNodeList.scaffold({ type: "node1" });
    const list2 = ast_node_list_1.AstNodeList.scaffold({ type: "node2" });
    const result = list1.concat(list2);
    chai_1.assert.deepEqual(result.map(node => node.type), ["node1", "node2"]);
});
suite("AstNodeList.getNodesFor()", function () {
    test("opening node given", function () {
        const list = new ast_node_list_1.AstNodeList();
        list.pushNode({ type: "paragraph_open" });
        list.pushNode({ type: "heading_open" });
        list.pushNode({ type: "text" });
        list.pushNode({ type: "heading_close" });
        list.pushNode({ type: "paragraph_close" });
        const result = list.getNodesFor(list[1]);
        const types = result.map(node => node.type);
        chai_1.assert.deepEqual(types, ["heading_open", "text", "heading_close"], "should return the nodes until the given opening node is closed");
    });
    test("non-opening node given", function () {
        const list = new ast_node_list_1.AstNodeList();
        list.pushNode({ type: "paragraph_open" });
        list.pushNode({ type: "strongtext", content: "foo" });
        list.pushNode({ type: "paragraph_close" });
        const result = list.getNodesFor(list[1]);
        const types = result.map(node => node.type);
        chai_1.assert.deepEqual(types, ["strongtext"]);
    });
});
suite("AstNodeList.getNodeOfTypes()", function () {
    test("one match", function () {
        const list = new ast_node_list_1.AstNodeList();
        list.pushNode({ type: "one" });
        list.pushNode({ type: "two" });
        list.pushNode({ type: "three" });
        const result = list.getNodeOfTypes("two", "four");
        chai_1.assert.equal(result.type, "two");
    });
    test("multiple matches", function () {
        const list = new ast_node_list_1.AstNodeList();
        list.pushNode({ type: "one" });
        list.pushNode({ type: "two" });
        chai_1.assert.throws(() => list.getNodeOfTypes("one", "two"), unprinted_user_error_1.UnprintedUserError);
    });
    test("no matches", function () {
        const list = new ast_node_list_1.AstNodeList();
        list.pushNode({ type: "one" });
        chai_1.assert.throws(() => list.getNodeOfTypes("two"), unprinted_user_error_1.UnprintedUserError);
    });
});
test("AstNodeList.getNodesOfTypes()", function () {
    const list = new ast_node_list_1.AstNodeList();
    list.pushNode({ type: "one" });
    list.pushNode({ type: "two" });
    list.pushNode({ type: "three" });
    const result = list.getNodesOfTypes("one", "three");
    chai_1.assert.deepEqual(result.map(node => node.type), ["one", "three"]);
});
test("AstNodeList.textInNode()", function () {
    const list = new ast_node_list_1.AstNodeList();
    list.pushNode({ type: "paragraph_open" });
    list.pushNode({ type: "heading_open" });
    list.pushNode({ type: "text", content: "foo" });
    list.pushNode({ type: "text", content: "bar" });
    list.pushNode({ type: "heading_close" });
    list.pushNode({ type: "paragraph_close" });
    const result = list.textInNode(list[1]);
    chai_1.assert.equal(result, "foobar");
});
suite("AstNodeList.hasNodeOfType()", function () {
    test("contains the given node type", function () {
        const list = new ast_node_list_1.AstNodeList();
        list.pushNode({ type: "paragraph_open" });
        list.pushNode({ type: "paragraph_close" });
        chai_1.assert.isTrue(list.hasNodeOfType("paragraph"));
    });
    test("doesn't contain the given node type", function () {
        const list = new ast_node_list_1.AstNodeList();
        list.pushNode({ type: "paragraph_open" });
        list.pushNode({ type: "paragraph_close" });
        chai_1.assert.isFalse(list.hasNodeOfType("code"));
    });
});
test("AstNodeList.iterator()", function () {
    const list = new ast_node_list_1.AstNodeList();
    list.pushNode({ type: "node1" });
    list.pushNode({ type: "node2" });
    const result = new ast_node_list_1.AstNodeList();
    for (const node of list) {
        result.push(node);
    }
    chai_1.assert.lengthOf(result, 2);
    chai_1.assert.equal(result[0].type, "node1");
    chai_1.assert.equal(result[1].type, "node2");
});
test("AstNodeList.nodeTypes()", function () {
    const list = new ast_node_list_1.AstNodeList();
    list.pushNode({ type: "type1" });
    list.pushNode({ type: "type2" });
    chai_1.assert.deepEqual(list.nodeTypes(), ["type1", "type2"]);
});
test("AstNodeList.push()", function () {
    const list = new ast_node_list_1.AstNodeList();
    const node = ast_node_1.AstNode.scaffold();
    list.push(node);
    chai_1.assert.lengthOf(list, 1);
    chai_1.assert.equal(list[0], node);
});
test("AstNodeList.scaffold()", function () {
    const list = new ast_node_list_1.AstNodeList();
    list.pushNode({ type: "heading_open" });
    list.pushNode({ type: "text" });
    chai_1.assert.lengthOf(list, 2);
    chai_1.assert.equal(list[0].type, "heading_open");
    chai_1.assert.equal(list[1].type, "text");
});
test("AstNodeList.text()", function () {
    const list = new ast_node_list_1.AstNodeList();
    list.pushNode({ type: "code_open" });
    list.pushNode({ type: "text", content: "hello" });
    list.pushNode({ type: "code_close" });
    const result = list.text();
    chai_1.assert.equal(result, "hello");
});
suite("AstNodeList.textInNodeOfType()", function () {
    test("type name given", function () {
        const list = new ast_node_list_1.AstNodeList();
        list.pushNode({ type: "code_open" });
        list.pushNode({ type: "text", content: "hello" });
        list.pushNode({ type: "code_close" });
        const result = list.textInNodeOfType("code");
        chai_1.assert.equal(result, "hello");
    });
    test("opening type name given", function () {
        const list = new ast_node_list_1.AstNodeList();
        list.pushNode({ type: "code_open" });
        list.pushNode({ type: "text", content: "hello" });
        list.pushNode({ type: "code_close" });
        const result = list.textInNodeOfType("code_open");
        chai_1.assert.equal(result, "hello");
    });
    test("multiple possible type names given", function () {
        const list = new ast_node_list_1.AstNodeList();
        list.pushNode({ type: "code_open" });
        list.pushNode({ type: "text", content: "hello" });
        list.pushNode({ type: "code_close" });
        const result = list.textInNodeOfType("code", "fence");
        chai_1.assert.equal(result, "hello");
    });
    test("multiple matching nodes", function () {
        const list = new ast_node_list_1.AstNodeList();
        list.pushNode({ type: "code_open" });
        list.pushNode({ type: "text", content: "hello" });
        list.pushNode({ type: "code_close" });
        list.pushNode({ type: "fence_open" });
        list.pushNode({ type: "text", content: "world" });
        list.pushNode({ type: "fence_close" });
        chai_1.assert.throws(() => list.textInNodeOfType("code", "fence"), unprinted_user_error_1.UnprintedUserError);
    });
    test("no matching nodes", function () {
        const list = new ast_node_list_1.AstNodeList();
        list.pushNode({ type: "code_open" });
        list.pushNode({ type: "text", content: "hello" });
        list.pushNode({ type: "code_close" });
        chai_1.assert.throws(() => list.textInNodeOfType("fence"), unprinted_user_error_1.UnprintedUserError);
    });
});
test("AstNodeList.textInNodesOfType()", function () {
    const list = new ast_node_list_1.AstNodeList();
    list.pushNode({ type: "strongtext", content: "foo" });
    list.pushNode({ type: "strongtext", content: "bar" });
    const texts = list.textInNodesOfType("strongtext");
    chai_1.assert.deepEqual(texts, ["foo", "bar"]);
});
//# sourceMappingURL=ast-node-list.test.js.map