"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = require("assert");
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const absolute_file_path_1 = require("../../filesystem/absolute-file-path");
const ast_node_1 = require("../standard-AST/ast-node");
const ast_node_list_1 = require("../standard-AST/ast-node-list");
const tag_mapper_1 = require("../tag-mapper");
const parse_html_files_1 = require("./parse-html-files");
suite("parseHTMLFiles", function () {
    const tagMapper = new tag_mapper_1.TagMapper();
    const sharedFixtureDir = path_1.default.join("src", "parsers", "fixtures");
    const specificFixtureDir = path_1.default.join("src", "parsers", "html", "fixtures");
    for (const fixturePath of [sharedFixtureDir, specificFixtureDir]) {
        for (const testDirName of fs_extra_1.default.readdirSync(fixturePath)) {
            const testDirPath = path_1.default.join(fixturePath, testDirName);
            test(`parse '${testDirName}'`, async function () {
                const expectedPath = path_1.default.join(testDirPath, "result.json");
                const expectedJSON = await fs_extra_1.default.readJSON(expectedPath);
                const expected = new ast_node_list_1.AstNodeList();
                for (const e of expectedJSON) {
                    e.file = e.file.replace("*", "html");
                    expected.push(ast_node_1.AstNode.scaffold(e));
                }
                const actual = await parse_html_files_1.parseHTMLFiles([new absolute_file_path_1.AbsoluteFilePath(path_1.default.join(testDirPath, "input.html"))], tagMapper);
                assert_1.strict.deepEqual(actual[0], expected);
            });
        }
    }
});
//# sourceMappingURL=parse-html-files.test.js.map