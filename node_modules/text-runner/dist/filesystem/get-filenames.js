"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const colorette_1 = __importDefault(require("colorette"));
const is_glob_1 = __importDefault(require("is-glob"));
const unprinted_user_error_1 = require("../errors/unprinted-user-error");
const absolute_file_path_1 = require("./absolute-file-path");
const all_markdown_files_1 = require("./all-markdown-files");
const files_matching_glob_1 = require("./files-matching-glob");
const has_directory_1 = require("./has-directory");
const is_markdown_file_1 = require("./is-markdown-file");
const markdown_files_in_dir_1 = require("./markdown-files-in-dir");
const remove_excluded_files_1 = require("./remove-excluded-files");
/**
 * Returns the name of all files/directories that match the given glob
 */
async function getFileNames(config) {
    let filenames = await getFiles(config);
    filenames = remove_excluded_files_1.removeExcludedFiles(filenames, config.exclude);
    return filenames;
}
exports.getFileNames = getFileNames;
async function getFiles(config) {
    if (config.fileGlob === "") {
        return all_markdown_files_1.allMarkdownFiles(config.fileGlob);
    }
    else if (await has_directory_1.hasDirectory(config.fileGlob)) {
        return markdown_files_in_dir_1.markdownFilesInDir(config.fileGlob);
    }
    else if (await is_markdown_file_1.isMarkdownFile(config.fileGlob)) {
        return [new absolute_file_path_1.AbsoluteFilePath(config.fileGlob)];
    }
    else if (is_glob_1.default(config.fileGlob)) {
        return files_matching_glob_1.filesMatchingGlob(config.fileGlob);
    }
    else {
        throw new unprinted_user_error_1.UnprintedUserError(`file or directory does not exist: ${colorette_1.default.red(config.fileGlob)}`);
    }
}
//# sourceMappingURL=get-filenames.js.map