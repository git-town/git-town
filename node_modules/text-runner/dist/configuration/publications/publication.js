"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const absolute_link_1 = require("../../filesystem/absolute-link");
const relative_link_1 = require("../../filesystem/relative-link");
const add_leading_dot_unless_empty_1 = require("../../helpers/add-leading-dot-unless-empty");
const add_leading_slash_1 = require("../../helpers/add-leading-slash");
const add_trailing_slash_1 = require("../../helpers/add-trailing-slash");
/**
 * Publications map local folders (in the source code) to public URL paths.
 * This is needed when verifying Markdown code that will be published as HTML somewhere,
 * and the links in Markdown reference the public URLs of the Markdown pages.
 */
class Publication {
    constructor(localPath, publicPath, publicExtension) {
        this.localPath = add_leading_slash_1.addLeadingSlash(add_trailing_slash_1.addTrailingSlash(localPath));
        this.publicPath = add_leading_slash_1.addLeadingSlash(publicPath);
        this.publicExtension = add_leading_dot_unless_empty_1.addLeadingDotUnlessEmpty(publicExtension);
    }
    /**
     * Returns the public link under which the given file path would be published
     * according to the rules of this publication
     */
    publish(localPath) {
        const re = new RegExp("^" + this.localPath);
        const linkPath = add_leading_slash_1.addLeadingSlash(localPath.unixified()).replace(re, this.publicPath);
        const result = new absolute_link_1.AbsoluteLink(linkPath);
        if (this.publicExtension == null) {
            return result;
        }
        return result.withExtension(this.publicExtension);
    }
    /** Returns whether this publication applies to the given file path */
    publishes(localPath) {
        return add_leading_slash_1.addLeadingSlash(add_trailing_slash_1.addTrailingSlash(localPath.unixified())).startsWith(this.localPath);
    }
    /**
     * Returns the localPath for the given link
     * mapped according to the rules of this publication.
     */
    resolve(link, defaultFile) {
        let result = link.rebase(this.publicPath, this.localPath);
        result = result.withoutAnchor();
        if (result.isLinkToDirectory() && !result.hasAnchor()) {
            result = result.append(new relative_link_1.RelativeLink(defaultFile));
        }
        else if (result.isLinkToDirectory() && result.hasAnchor()) {
            result = result
                .directory()
                .append(new relative_link_1.RelativeLink(defaultFile))
                .withAnchor(result.anchor());
        }
        else if (result.hasExtension(this.publicExtension)) {
            result = result.withExtension("md");
        }
        return new absolute_file_path_1.AbsoluteFilePath(result.value);
    }
    /** Returns whether this publication maps the given link */
    resolves(link) {
        return link.value.startsWith(this.publicPath);
    }
}
exports.Publication = Publication;
const absolute_file_path_1 = require("../../filesystem/absolute-file-path");
//# sourceMappingURL=publication.js.map