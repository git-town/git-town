"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const parse_cmdline_args_1 = require("./parse-cmdline-args");
suite("parseCmdlineArgs()", function () {
    test("with unix <node> call", function () {
        const args = parse_cmdline_args_1.parseCmdlineArgs([
            "/usr/local/Cellar/node/9.3.0_1/bin/node",
            "/Users/kevlar/d/text-runner/bin/text-run",
            "run"
        ]);
        chai_1.assert.equal(args.command, "run");
        chai_1.assert.isUndefined(args.fileGlob);
    });
    test("with windows <node> call", function () {
        const args = parse_cmdline_args_1.parseCmdlineArgs([
            "C:\\Program Files (x86)\\nodejs\\node.exe",
            "C:\\projects\\text-runner\\bin\\text-run.cmd\\..\\..\\dist\\cli.js",
            "run"
        ]);
        chai_1.assert.equal(args.command, "run");
        chai_1.assert.isUndefined(args.fileGlob);
    });
    test("with <node> and <text-run> call", function () {
        const args = parse_cmdline_args_1.parseCmdlineArgs([
            "/usr/local/Cellar/node/9.3.0_1/bin/node",
            "/Users/kevlar/d/text-runner/bin/text-run",
            "run"
        ]);
        chai_1.assert.equal(args.command, "run");
        chai_1.assert.isUndefined(args.fileGlob);
    });
    test("with <text-run> call", function () {
        const args = parse_cmdline_args_1.parseCmdlineArgs(["/Users/kevlar/d/text-runner/bin/text-run", "run"]);
        chai_1.assert.equal(args.command, "run");
        chai_1.assert.isUndefined(args.fileGlob);
    });
    test("--offline <file>", function () {
        const args = parse_cmdline_args_1.parseCmdlineArgs(["--offline", "documentation/actions/cd.md"]);
        chai_1.assert.equal(args.command, "run");
        chai_1.assert.isTrue(args.offline);
        chai_1.assert.equal(args.fileGlob, "documentation/actions/cd.md");
    });
    test("<file>", function () {
        const args = parse_cmdline_args_1.parseCmdlineArgs(["documentation/actions/cd.md"]);
        chai_1.assert.equal(args.command, "run");
        chai_1.assert.equal(args.fileGlob, "documentation/actions/cd.md");
    });
    test("(no args)", function () {
        const args = parse_cmdline_args_1.parseCmdlineArgs([]);
        chai_1.assert.equal(args.command, "run");
        chai_1.assert.isUndefined(args.fileGlob);
    });
    test("--format dot", function () {
        const args = parse_cmdline_args_1.parseCmdlineArgs(["--format", "dot"]);
        chai_1.assert.equal(args.command, "run");
        chai_1.assert.equal(args.formatterName, "dot");
    });
    test("--workspace foo/bar", function () {
        const args = parse_cmdline_args_1.parseCmdlineArgs(["--workspace", "foo/bar"]);
        chai_1.assert.equal(args.command, "run");
        chai_1.assert.equal(args.workspace, "foo/bar");
    });
    test("--keep-tmp", function () {
        const args = parse_cmdline_args_1.parseCmdlineArgs(["--keep-tmp", "foo.md"]);
        chai_1.assert.equal(args.command, "run");
        chai_1.assert.isTrue(args.keepTmp);
        chai_1.assert.equal(args.fileGlob, "foo.md");
    });
});
//# sourceMappingURL=parse-cmdline-args.test.js.map