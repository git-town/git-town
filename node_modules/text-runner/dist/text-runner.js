"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const colorette_1 = __importDefault(require("colorette"));
const add_1 = require("./commands/add");
const debug_1 = require("./commands/debug");
const dynamic_1 = require("./commands/dynamic");
const help_1 = require("./commands/help");
const run_1 = require("./commands/run");
const setup_1 = require("./commands/setup");
const static_1 = require("./commands/static");
const unused_1 = require("./commands/unused");
const version_1 = require("./commands/version");
const determine_config_filename_1 = require("./configuration/config-file/determine-config-filename");
const load_config_file_1 = require("./configuration/config-file/load-config-file");
const determine_configuration_1 = require("./configuration/determine-configuration");
/**
 * Tests the documentation in the given directory
 * @param cmdLineArgs the arguments provided on the command line
 */
async function textRunner(cmdlineArgs) {
    let configuration;
    try {
        const configFilePath = await determine_config_filename_1.determineConfigFilename(cmdlineArgs);
        const configFileData = load_config_file_1.loadConfigFile(configFilePath);
        configuration = determine_configuration_1.determineConfiguration(configFileData, cmdlineArgs);
        const commandName = cmdlineArgs.command;
        let errors;
        switch (commandName) {
            case "add":
                errors = await add_1.addCommand(cmdlineArgs.fileGlob);
                return errors;
            case "debug":
                errors = await debug_1.debugCommand(configuration);
                return errors;
            case "dynamic":
                errors = await dynamic_1.dynamicCommand(configuration);
                return errors;
            case "help":
                await help_1.helpCommand();
                return [];
            case "run":
                errors = await run_1.runCommand(configuration);
                return errors;
            case "setup":
                await setup_1.setupCommand();
                return [];
            case "static":
                errors = await static_1.staticCommand(configuration);
                return errors;
            case "unused":
                await unused_1.unusedCommand(configuration);
                return [];
            case "version":
                await version_1.versionCommand();
                return [];
            default:
                console.log(colorette_1.default.red(`unknown command: ${commandName || ""}`));
                return [];
        }
    }
    catch (err) {
        if (configuration && configuration.sourceDir) {
            process.chdir(configuration.sourceDir);
        }
        return [err];
    }
}
exports.textRunner = textRunner;
//# sourceMappingURL=text-runner.js.map