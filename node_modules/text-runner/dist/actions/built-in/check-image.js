"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const colorette_1 = __importDefault(require("colorette"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const got_1 = __importDefault(require("got"));
const path_1 = __importDefault(require("path"));
/** The "checkImage" action checks for broken images. */
async function checkImage(args) {
    const node = args.nodes[0];
    let imagePath = node.attributes ? node.attributes.src : null;
    if (!imagePath) {
        throw new Error("image tag without source");
    }
    args.name(`image ${colorette_1.default.cyan(imagePath)}`);
    if (isRemoteImage(imagePath)) {
        const result = await checkRemoteImage(imagePath, args);
        return result;
    }
    else {
        if (!imagePath.startsWith("/")) {
            imagePath = path_1.default.join(path_1.default.dirname(node.file.platformified()), imagePath);
        }
        const result = await checkLocalImage(imagePath, args.configuration);
        return result;
    }
}
exports.default = checkImage;
async function checkLocalImage(imagePath, c) {
    try {
        await fs_extra_1.default.stat(path_1.default.join(c.sourceDir, imagePath));
    }
    catch (err) {
        throw new Error(`image ${colorette_1.default.red(imagePath)} does not exist`);
    }
}
async function checkRemoteImage(url, args) {
    if (args.configuration.offline) {
        return args.SKIPPING;
    }
    try {
        await got_1.default(url, { timeout: 2000 });
    }
    catch (err) {
        if (err instanceof got_1.default.HTTPError && err.response.statusCode === 404) {
            args.log(`image ${colorette_1.default.magenta(url)} does not exist`);
        }
        else if (err instanceof got_1.default.TimeoutError) {
            args.log(`image ${colorette_1.default.magenta(url)} timed out`);
        }
        else {
            throw err;
        }
    }
    return;
}
function isRemoteImage(imagePath) {
    if (imagePath != null) {
        return imagePath.startsWith("//") || imagePath.startsWith("http://") || imagePath.startsWith("https://");
    }
    else {
        return false;
    }
}
//# sourceMappingURL=check-image.js.map