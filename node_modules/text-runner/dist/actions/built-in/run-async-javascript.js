"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/** The "runAsyncJavascript" action runs the async-await JavaScript code given in the code block. */
function runAsyncJavascript(args) {
    args.name("run async javascript");
    let code = args.nodes.textInNodeOfType("fence");
    if (code == null) {
        throw new Error("no JavaScript code found in the fenced block");
    }
    code = replaceSubstitutions(code, args.configuration);
    code = replaceRequireLocalModule(code);
    code = replaceVariableDeclarations(code);
    code = wrapInAsyncFunction(code);
    args.log(code);
    eval(code);
}
exports.default = runAsyncJavascript;
function wrapInAsyncFunction(code) {
    return `(async function() {
  ${code}
})()`;
}
/** replaceSubstitutions  configured in text-run.yml. */
function replaceSubstitutions(code, c) {
    // TODO: use optional chaining from TypeScript 3.7 once VSCode and linters can handle it
    for (const replaceData of (c.actions.runJavascript || {}).replace || []) {
        code = code.replace(replaceData.search, replaceData.replace);
    }
    return code;
}
/** replaceRequireLocalModule makes sure "require('.') works as expected even if running in a temp workspace. */
function replaceRequireLocalModule(code) {
    return code.replace(/require\(['"].['"]\)/, "require(process.cwd())");
}
/** replaceVariableDeclarations makes variable declarations persist across code blocks. */
function replaceVariableDeclarations(code) {
    return code
        .replace(/\bconst /g, "global.")
        .replace(/\bvar /g, "global.")
        .replace(/\bthis\./g, "global.");
}
//# sourceMappingURL=run-async-javascript.js.map