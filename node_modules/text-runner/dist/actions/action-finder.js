"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const colorette_1 = __importDefault(require("colorette"));
const glob_1 = __importDefault(require("glob"));
const interpret_1 = __importDefault(require("interpret"));
const path_1 = __importDefault(require("path"));
const rechoir_1 = __importDefault(require("rechoir"));
const unprinted_user_error_1 = require("../errors/unprinted-user-error");
const get_action_name_1 = require("./helpers/get-action-name");
const javascript_extensions_1 = require("./helpers/javascript-extensions");
const trim_extension_1 = require("./helpers/trim-extension");
/** ActionFinder provides runnable action instances for activities. */
class ActionFinder {
    constructor() {
        this.builtinActions = this.loadBuiltinActions();
        this.customActions = this.loadCustomActions();
    }
    /** actionFor provides the action function for the given Activity. */
    actionFor(activity) {
        return (this.builtinActions[activity.actionName] ||
            this.customActions[activity.actionName] ||
            this.errorUnknownAction(activity));
    }
    /** customActionNames returns the names of all built-in actions. */
    customActionNames() {
        return Object.keys(this.customActions);
    }
    /** errorUnknownAction signals that the given activity has no known action. */
    errorUnknownAction(activity) {
        let errorText = `unknown action: ${colorette_1.default.red(activity.actionName)}\nAvailable built-in actions:\n`;
        for (const actionName of Object.keys(this.builtinActions).sort()) {
            errorText += `* ${actionName}\n`;
        }
        if (Object.keys(this.customActions).length > 0) {
            errorText += "\nUser-defined actions:\n";
            for (const actionName of Object.keys(this.customActions).sort()) {
                errorText += `* ${actionName}\n`;
            }
        }
        else {
            errorText += "\nNo custom actions defined.\n";
        }
        errorText += `\nTo create a new "${activity.actionName}" action,\n`;
        errorText += `run "text-run add ${activity.actionName}"\n`;
        throw new unprinted_user_error_1.UnprintedUserError(errorText, activity.file.platformified(), activity.line);
    }
    loadBuiltinActions() {
        const result = {};
        for (const filename of this.builtinActionFilePaths()) {
            result[get_action_name_1.getActionName(filename)] = require(filename).default;
        }
        return result;
    }
    loadCustomActions() {
        const result = {};
        // TODO remove support for JS transpilers
        require("babel-register");
        for (const filename of this.customActionFilePaths()) {
            rechoir_1.default.prepare(interpret_1.default.jsVariants, filename);
            const actionName = get_action_name_1.getActionName(filename);
            if (this.builtinActions[actionName]) {
                throw new unprinted_user_error_1.UnprintedUserError(`redefining internal action '${actionName}'`, filename, 1);
            }
            result[actionName] = require(filename);
        }
        return result;
    }
    builtinActionFilePaths() {
        return glob_1.default
            .sync(path_1.default.join(__dirname, "..", "actions", "built-in", "*.?s"))
            .filter(name => !name.endsWith(".d.ts"))
            .map(trim_extension_1.trimExtension);
    }
    customActionFilePaths() {
        const pattern = path_1.default.join(process.cwd(), "text-run", `*.@(${javascript_extensions_1.javascriptExtensions().join("|")})`);
        return glob_1.default.sync(pattern);
    }
}
exports.actionFinder = new ActionFinder();
//# sourceMappingURL=action-finder.js.map