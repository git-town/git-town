"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const diff = __importStar(require("diff"));
/**
 * Chars checks the two given strings character-by-character for equality.
 * If there are any differences, it throws an exception with a Bash-colored diff as the error message.
 */
function chars(actual, expected, message = "mismatching strings") {
    if (actual == null) {
        throw new Error("AssertNoDiff: actual value not provided");
    }
    if (expected == null) {
        throw new Error("AssertNoDiff: expected value not provided");
    }
    const differences = diff.diffChars(expected, actual);
    if (differences.length > 1) {
        throw new Error(`${message}:\n\n${renderDiff(differences)}`);
    }
}
exports.chars = chars;
/**
 * Json checks the two given Objects for equality.
 * If there are any differences, it throws an exception with a Bash-colored diff as the error message.
 */
function json(actual, expected, message = "mismatching objects") {
    if (!actual) {
        throw new Error("AssertNoDiff: actual value not provided");
    }
    if (!expected) {
        throw new Error("AssertNoDiff: expected value not provided");
    }
    const differences = diff.diffJson(expected, actual);
    if (differences.length > 1) {
        throw new Error(`${message}:\n\n${renderDiff(differences)}`);
    }
}
exports.json = json;
/**
 * Chars checks the two given strings line-by-line for equality.
 * Extra whitespace is ignored.
 * If there are any differences, it throws an exception with a Bash-colored diff as the error message.
 */
function trimmedLines(actual, expected, message = "mismatching lines") {
    if (actual == null) {
        throw new Error("AssertNoDiff: actual value not provided");
    }
    if (expected == null) {
        throw new Error("AssertNoDiff: expected value not provided");
    }
    const differences = diff.diffTrimmedLines(expected, actual);
    if (differences.length > 1) {
        throw new Error(`${message}:\n\n${renderDiff(differences)}`);
    }
}
exports.trimmedLines = trimmedLines;
/**
 * WordsWithSpace checks the two given strings word-by-word for equality
 * treating whitespace as significant.
 * If there are any differences, it throws an exception with a Bash-colored diff as the error message.
 */
function wordsWithSpace(actual, expected, message = "mismatching words") {
    if (actual == null) {
        throw new Error("AssertNoDiff: actual value not provided");
    }
    if (expected == null) {
        throw new Error("AssertNoDiff: expected value not provided");
    }
    const differences = diff.diffWordsWithSpace(expected, actual);
    if (differences.length > 1) {
        throw new Error(`${message}:\n\n${renderDiff(differences)}`);
    }
}
exports.wordsWithSpace = wordsWithSpace;
/**
 * Chars checks the two given strings line-by-line for equality.
 * Extra whitespace is ignored.
 * If there are any differences, it throws an exception with a Bash-colored diff as the error message.
 */
// export function arrays(
//   actual: Array<Object>,
//   expected: Array<Object>,
//   message = "mismatching arrays"
// ) {
//   checkArgsExist(actual, expected)
//   const differences = diff.diffArrays(expected, actual)
//   if (differences.length > 1) {
//     throw new Error(`${message}:\n\n${renderDiff(differences)}`)
//   }
// }
/** GetColor returns the chalk function to render the given diff part. */
function getColor(part) {
    if (part.added) {
        return chalk_1.default.green;
    }
    if (part.removed) {
        return chalk_1.default.red;
    }
    return chalk_1.default.grey;
}
/** RenderDiff renders the given diff into a string containing Bash colors. */
function renderDiff(differences) {
    let result = "";
    for (const part of differences) {
        const color = getColor(part);
        result += color(part.value);
    }
    return result;
}
