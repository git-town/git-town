#!/bin/bash
source "$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/helpers/helpers.sh"


# Called when squash_merge fails due to empty commit message
function error_empty_commit {
  discard_open_changes
  checkout_branch "$initial_branch_name"
  if [ "$target_branch_name" != "$initial_branch_name" ]; then
    restore_open_changes
  fi

  echo_error_header
  echo_error "Aborting ship due to empty commit message"
  exit_with_error
}


# Parses the options and reruns the message
function extract_message {
  message=''

  while getopts "m:" opt; do
    case "$opt" in
    m) message=$OPTARG
    esac
  done

  echo "$message"
}


function perform_ship {
  local message=$(extract_message "$@")

  if [ "$target_branch_name" != "$initial_branch_name" ]; then
    ensure_has_branch "$target_branch_name"
  fi

  ensure_is_feature_branch "$target_branch_name" "Only feature branches can be shipped."
  fetch_repo
  ensure_branch_in_sync "$target_branch_name"
  ensure_branch_in_sync "$main_branch_name"
  ensure_has_shippable_changes "$target_branch_name"

  if [ "$target_branch_name" != "$initial_branch_name" ]; then
    stash_open_changes
  else
    ensure_no_open_changes "You cannot ship with uncommitted changes."
  fi

  checkout_main_branch
  squash_merge "$target_branch_name" "$message"
  push_branch
  delete_branch "$target_branch_name" "force"

  if [ "$target_branch_name" != "$initial_branch_name" ]; then
    checkout_branch "$initial_branch_name"
    restore_open_changes
  fi
}


if [ "$1" == "--abort" ]; then
  run_abort_script
else
  if [ "$#" -gt 0 -a "$1" != "-m" ]; then
    target_branch_name=$1
    shift
  else
    target_branch_name=$(get_current_branch_name)
  fi

  perform_ship "$@"
fi

exit_with_success
