#!/bin/bash
source "$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/helpers/helpers.sh"


# Called when squash_merge fails due to empty commit message
function error_empty_commit {
  discard_open_changes
  checkout_branch "$initial_branch_name"
  if [ "$target_branch_name" != "$initial_branch_name" ]; then
    restore_open_changes
  fi

  echo_error_header
  echo_error "Aborting ship due to empty commit message"
  exit_with_error
}


# Called when ensure_no_open_changes is exiting with error
function error_has_open_changes {
  return_to_initial_branch
}


# Called when ensure_is_feature_branch is exiting with error
function error_is_not_feature_branch {
  return_to_initial_branch
}


# Called when pull_branch fails on the feature branch
function error_pull_feature_branch {
  create_merge_conflict_abort_script
  exit_with_script_messages
}


# Called when pull_branch fails on the main branch
function error_pull_main_branch {
  create_rebase_conflict_abort_script
  exit_with_script_messages
}


# Called when merge_branch fails
function error_merge_branch {
  create_merge_conflict_abort_script
  exit_with_script_messages
}


# Parses the options and reruns the message
function extract_message {
  message=''

  while getopts "m:" opt; do
    case "$opt" in
    m) message=$OPTARG
    esac
  done

  echo "$message"
}


function perform_ship {
  local message=$(extract_message "$@")

  if [ "$target_branch_name" != "$initial_branch_name" ]; then
    ensure_has_branch "$target_branch_name"
    stash_open_changes
  fi

  ensure_no_open_changes "You cannot ship with uncommitted changes."
  ensure_is_feature_branch "$target_branch_name" "Only feature branches can be shipped."

  checkout_main_branch
  sync_branch 'rebase'
  checkout_branch "$target_branch_name"
  pull_branch
  merge_branch "$main_branch_name"
  ensure_has_shippable_changes
  checkout_main_branch
  squash_merge "$target_branch_name" "$message"
  push_branch
  delete_branch "$target_branch_name" "force"

  return_to_initial_branch
}


function return_to_initial_branch {
  if [ "$target_branch_name" != "$initial_branch_name" ]; then
    checkout_branch "$initial_branch_name"
    restore_open_changes
  fi
}


if [ "$1" == "--abort" ]; then
  run_abort_script
else
  if [ "$#" -gt 0 -a "$1" != "-m" ]; then
    target_branch_name=$1
    shift
  else
    target_branch_name=$(get_current_branch_name)
  fi

  perform_ship "$@"
fi

exit_with_success
