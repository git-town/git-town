#!/bin/bash
source "$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/helpers/helpers.sh"

# The path to the abort script
abort_script="/tmp/git_ship_abort$temp_filename_suffix"


# Called by pull_branch when the merge fails with conflicts on the feature branch
function error_pull_feature_branch {
  echo_red "ERROR WHILE PULLING THE FEATURE BRANCH"

  # Create the abort file.
  echo "git merge --abort" > $abort_script
  if [ $initial_open_changes == true ]; then
    echo "git stash pop" >> $abort_script
  fi

  # Show error message.
  echo "To undo this, run 'git ship --abort', or do the following steps manually:"
  cat $abort_script
  echo
  exit 1
}


# Called by pull_branch when the rebase fails with conflicts on the main branch
function error_pull_main_branch {
  echo_red "ERROR WHILE PULLING THE MAIN BRANCH"

  # Create the abort file.
  echo "git rebase --abort" > $abort_script
  echo "git checkout $initial_branch_name" >> $abort_script
  if [ $initial_open_changes == true ]; then
    echo "git stash pop" >> $abort_script
  fi

  # Show error message.
  echo "To undo this, run 'git ship --abort', or do the following steps manually:"
  cat $abort_script
  echo
  exit 1
}


# Called by merge_branch when the merge fails with merge conflicts
function error_merge_branch {
  echo_red "ERROR WHILE MERGING THE MAIN BRANCH INTO THE FEATURE BRANCH"

  # Create the abort file
  echo "git merge --abort" > $abort_script
  if [ $initial_open_changes == true ]; then
    echo "git stash pop" >> $abort_script
  fi

  # Show error message.
  echo "To undo this, run 'git ship --abort', or do the following steps manually:"
  cat $abort_script
  echo
  exit 1
}


# Parses the options and reruns the message
function extract_message {
  message=''

  while getopts "m::" opt; do
    case "$opt" in
    m) message=$OPTARG
    esac
  done

  echo $message
}


# Aborts a currently ongoing sync
function abort_ship {
  echo_intro "ABORTING THE PREVIOUS GIT SHIP"
  if [ -f $abort_script ]; then
    source $abort_script
    rm $abort_script
    echo_all_done
  else
    echo_red "Cannot find abort definition file"
  fi
}


function perform_ship {
  local message=`extract_message "$*"`
  echo_intro "SHIPPING THE CURRENT FEATURE BRANCH"

  ensure_no_open_changes "You should not ship while having open files in Git."
  ensure_on_feature_branch "Please checkout a feature branch to ship."

  sync_main_branch
  pull_branch
  merge_branch $main_branch_name
  checkout_main_branch
  squash_merge $initial_branch_name "$message"
  push_branch
  delete_branch $initial_branch_name
  echo_all_done
}


if [ "$1" == "--abort" ]; then
  abort_ship
else
  perform_ship "$*"
fi

