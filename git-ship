#!/bin/bash
source "$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/helpers/helpers.sh"


abort_script_filename=`abort_script_filename_for_command ship`


# Exit if the current branch is not ahead of main
function ensure_ahead_of_main_branch {
  local current_branch_name=`get_current_branch_name`
  if [ `is_ahead_of_main $current_branch_name` == false ]; then
    echo_error_header
    echo_error "The branch '$current_branch_name' has no commits to merge into '$main_branch_name'."
    exit_with_error
  fi
}


# Called when pull_branch fails on the feature branch
function error_pull_feature_branch {
  create_merge_conflict_abort_script
  exit_with_abort_continue_messages 'ship'
}


# Called when pull_branch fails on the main branch
function error_pull_main_branch {
  create_rebase_conflict_abort_script
  exit_with_abort_continue_messages 'ship'
}


# Called when merge_branch fails
function error_merge_branch {
  create_merge_conflict_abort_script
  exit_with_abort_continue_messages 'ship'
}


# Parses the options and reruns the message
function extract_message {
  message=''

  while getopts "m::" opt; do
    case "$opt" in
    m) message=$OPTARG
    esac
  done

  echo $message
}


function perform_ship {
  local message=`extract_message "$*"`

  ensure_no_open_changes "You should not ship while having open files in Git."
  ensure_on_feature_branch "Only feature branches can be shipped."

  sync_main_branch
  pull_branch
  merge_branch $main_branch_name
  ensure_ahead_of_main_branch
  checkout_main_branch
  squash_merge $initial_branch_name "$message"
  push_branch
  delete_branch $initial_branch_name "force"
}


if [ "$1" == "--abort" ]; then
  run_abort_script
else
  perform_ship "$*"
fi

exit_with_success
