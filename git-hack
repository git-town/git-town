#!/bin/bash
source "$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/helpers/helpers.sh"


abort_script=`abort_filename "hack"`

# Called by pull_feature_branch when the merge fails with conflicts
function error_pull_main_branch {
  # Create the abort file.
  echo "git rebase --abort" > $abort_script
  echo "git checkout $initial_branch_name" >> $abort_script
  if [ $initial_open_changes == true ]; then
    echo "git stash pop" >> $abort_script
  fi

  # Show error message.
  echo
  echo_red 'To abort the rebase and check out the original branch, run "git hack --abort".'
  exit_with_error
}


function perform_hack {
  target_branch_name=$1

  # Exit with a help screen if parameters are missing.
  if [ -z $target_branch_name ]; then
    echo_usage_header
    echo_usage "git hack [feature branch name]"
    exit_with_error
  fi

  # Exit if the branch with that name already exists.
  if [ `has_branch $target_branch_name` == true ]; then
    echo_error_header
    echo_error "A branch named '$target_branch_name' already exists"
    exit_with_error
  fi

  stash_open_changes
  sync_main_branch
  create_feature_branch $target_branch_name
  restore_open_changes
}


if [ "$1" == "--abort" ]; then
  run_abort_script
else
  perform_hack "$*"
fi

exit_with_success
