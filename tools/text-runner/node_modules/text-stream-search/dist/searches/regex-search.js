"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * RegexSearch looks for the given regex in the text stream.
 */
class RegexSearch {
    constructor(regex, resolve, reject, text, timeoutDuration) {
        this.resolve = resolve;
        this.reject = reject;
        this.text = text;
        this.searchRegexp = new RegExp(regex);
        if (timeoutDuration != null) {
            this.timeoutDuration = timeoutDuration;
            setTimeout(this.onTimeout.bind(this), timeoutDuration);
        }
    }
    /** Scan checks the stream text for occurrences of the searchRegexp. */
    scan() {
        const matches = this.text.toString().match(this.searchRegexp);
        if (matches) {
            this.resolve(matches[0]);
        }
    }
    /** OnTimeOut is called after this subscription times out. */
    onTimeout() {
        this.reject(new Error(`Regex ${this.searchRegexp} not found within ${this.timeoutDuration} ms. The captured text so far is:\n${this.text.toString()}`));
    }
}
exports.RegexSearch = RegexSearch;
