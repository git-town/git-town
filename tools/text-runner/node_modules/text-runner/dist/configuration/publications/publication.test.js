"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const absolute_file_path_1 = require("../../filesystem/absolute-file-path");
const absolute_link_1 = require("../../filesystem/absolute-link");
const publication_1 = require("./publication");
suite("Publication.resolve()", function () {
    test("custom public extension", function () {
        const publication = new publication_1.Publication("/content", "/", "html");
        const link = new absolute_link_1.AbsoluteLink("/1.html");
        const localPath = publication.resolve(link, "");
        chai_1.assert.equal(localPath.unixified(), "content/1.md");
    });
    test("empty public extension", function () {
        const publication = new publication_1.Publication("/content", "/", "");
        const link = new absolute_link_1.AbsoluteLink("/1");
        const localPath = publication.resolve(link, "");
        chai_1.assert.equal(localPath.unixified(), "content/1.md");
    });
    test("link with no filename and anchor", function () {
        const publication = new publication_1.Publication("/content/", "/", "");
        const link = new absolute_link_1.AbsoluteLink("/#hello");
        const localPath = publication.resolve(link, "index.md");
        chai_1.assert.equal(localPath.unixified(), "content/index.md");
    });
    test("link with no filename in mapped folder", function () {
        const publication = new publication_1.Publication("/content/", "/posts", "");
        const link = new absolute_link_1.AbsoluteLink("/posts");
        const localPath = publication.resolve(link, "index.md");
        chai_1.assert.equal(localPath.unixified(), "content/index.md");
    });
});
suite("Publication.resolves()", function () {
    test("matching link", function () {
        const publication = new publication_1.Publication("/content", "/foo", "");
        const link = new absolute_link_1.AbsoluteLink("/foo/bar");
        chai_1.assert.isTrue(publication.resolves(link));
    });
    test("non-matching link", function () {
        const publication = new publication_1.Publication("/content", "/foo", "");
        const link = new absolute_link_1.AbsoluteLink("/one/two");
        chai_1.assert.isFalse(publication.resolves(link));
    });
});
test("Publication.publish()", function () {
    const publication = new publication_1.Publication("/content", "/", ".html");
    const filePath = new absolute_file_path_1.AbsoluteFilePath("content/1.md");
    const link = publication.publish(filePath);
    chai_1.assert.equal(link.value, "/1.html");
});
suite("Publication.publishes()", function () {
    const tests = [
        { pub: "/foo/bar", give: "/foo/bar", want: true },
        { pub: "/foo/bar", give: "/foo/bar/baz", want: true },
        { pub: "/foo/other", give: "/foo/bar/baz", want: false }
    ];
    for (const tt of tests) {
        test(`${tt.give}-${tt.pub}`, function () {
            const publication = new publication_1.Publication(tt.pub, "", "");
            const filePath = new absolute_file_path_1.AbsoluteFilePath(tt.give);
            chai_1.assert.equal(publication.publishes(filePath), tt.want);
        });
    }
});
suite("Publication.resolve()", function () {
    const tests = [
        { desc: "other link", give: "/one/two.html", want: "one/two.md" },
        { desc: "published", give: "/blog/one.html", want: "content/posts/one.md" },
        { desc: "with anchor", give: "/one/two.html#hello", want: "one/two.md" }
    ];
    for (const tt of tests) {
        test(tt.desc, function () {
            const publication = new publication_1.Publication("/content/posts", "/blog", "html");
            const link = new absolute_link_1.AbsoluteLink(tt.give);
            const localPath = publication.resolve(link, "");
            chai_1.assert.equal(localPath.unixified(), tt.want);
        });
    }
});
//# sourceMappingURL=publication.test.js.map