"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const add_leading_dot_unless_empty_1 = require("../helpers/add-leading-dot-unless-empty");
const add_leading_slash_1 = require("../helpers/add-leading-slash");
const absolute_file_path_1 = require("./absolute-file-path");
const remove_double_slash_1 = require("./helpers/remove-double-slash");
const straighten_link_1 = require("./helpers/straighten-link");
const unixify_1 = require("./helpers/unixify");
/**
 * Represents a link to another Markdown file,
 * all the way from the root directory
 * (i.e. a link starting with '/')
 */
class AbsoluteLink {
    constructor(publicPath) {
        this.value = add_leading_slash_1.addLeadingSlash(remove_double_slash_1.removeDoubleSlash(unixify_1.unixify(publicPath)));
    }
    /**
     * Returns the anchor part of this link
     */
    anchor() {
        return this.value.split("#")[1] || "";
    }
    /**
     * Returns a new link that consists of this link
     * with the given relative link appended
     */
    append(segment) {
        return new AbsoluteLink(straighten_link_1.straightenLink(this.value + "/" + segment.value));
    }
    /**
     * Returns a link to the containing directory
     */
    directory() {
        const withoutAnchor = this.withoutAnchor();
        if (withoutAnchor.isLinkToDirectory()) {
            return withoutAnchor;
        }
        return new AbsoluteLink(withoutAnchor.value.substr(0, withoutAnchor.value.lastIndexOf("/") + 1));
    }
    hasAnchor() {
        return this.anchor() !== "";
    }
    /**
     * Returns whether this link has the given extension
     */
    hasExtension(extension) {
        return path_1.default.extname(this.value) === add_leading_dot_unless_empty_1.addLeadingDotUnlessEmpty(extension);
    }
    /**
     * Returns whether this link points to a directory
     */
    isLinkToDirectory() {
        return this.value.endsWith("/");
    }
    /**
     * Returns the file path that this link has on the local filesystem
     * @param publications the publications of this TextRunner session
     * @param defaultFile the filename to use in case this link points to a directory
     */
    localize(publications, defaultFile) {
        const publication = publications.publicationForLink(this);
        let result = publication
            ? publication.resolve(this.urlDecoded(), defaultFile)
            : new absolute_file_path_1.AbsoluteFilePath(this.urlDecoded().withoutAnchor().value);
        // append the default file
        if (result.extName() === "" && defaultFile) {
            result = result.append(defaultFile);
        }
        return result;
    }
    /**
     * Returns a link where the old enclosing directory is replaced
     * with the new enclosing directory
     */
    rebase(oldPath, newPath) {
        const re = new RegExp("^" + oldPath);
        return new AbsoluteLink(this.value.replace(re, newPath));
    }
    urlDecoded() {
        return new AbsoluteLink(decodeURI(this.value));
    }
    /**
     * Returns a link that contains the given anchor
     */
    withAnchor(anchor) {
        return new AbsoluteLink(this.withoutAnchor().value + "#" + anchor);
    }
    /**
     * Returns another AbsoluteLink instance that uses the given file extension
     */
    withExtension(newExtension) {
        const extRE = new RegExp(path_1.default.extname(this.value) + "$");
        return new AbsoluteLink(this.value.replace(extRE, add_leading_dot_unless_empty_1.addLeadingDotUnlessEmpty(newExtension)));
    }
    /**
     * Returns a link that is this link without the anchor
     */
    withoutAnchor() {
        return new AbsoluteLink(this.value.split("#")[0]);
    }
}
exports.AbsoluteLink = AbsoluteLink;
//# sourceMappingURL=absolute-link.js.map