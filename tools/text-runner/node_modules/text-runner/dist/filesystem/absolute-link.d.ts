import { Publications } from "../configuration/publications/publications";
import { AbsoluteFilePath } from "./absolute-file-path";
import { RelativeLink } from "./relative-link";
/**
 * Represents a link to another Markdown file,
 * all the way from the root directory
 * (i.e. a link starting with '/')
 */
export declare class AbsoluteLink {
    readonly value: string;
    constructor(publicPath: string);
    /**
     * Returns the anchor part of this link
     */
    anchor(): string;
    /**
     * Returns a new link that consists of this link
     * with the given relative link appended
     */
    append(segment: RelativeLink): AbsoluteLink;
    /**
     * Returns a link to the containing directory
     */
    directory(): AbsoluteLink;
    hasAnchor(): boolean;
    /**
     * Returns whether this link has the given extension
     */
    hasExtension(extension: string): boolean;
    /**
     * Returns whether this link points to a directory
     */
    isLinkToDirectory(): boolean;
    /**
     * Returns the file path that this link has on the local filesystem
     * @param publications the publications of this TextRunner session
     * @param defaultFile the filename to use in case this link points to a directory
     */
    localize(publications: Publications, defaultFile: string): AbsoluteFilePath;
    /**
     * Returns a link where the old enclosing directory is replaced
     * with the new enclosing directory
     */
    rebase(oldPath: string, newPath: string): AbsoluteLink;
    urlDecoded(): AbsoluteLink;
    /**
     * Returns a link that contains the given anchor
     */
    withAnchor(anchor: string): AbsoluteLink;
    /**
     * Returns another AbsoluteLink instance that uses the given file extension
     */
    withExtension(newExtension: string): AbsoluteLink;
    /**
     * Returns a link that is this link without the anchor
     */
    withoutAnchor(): AbsoluteLink;
}
//# sourceMappingURL=absolute-link.d.ts.map