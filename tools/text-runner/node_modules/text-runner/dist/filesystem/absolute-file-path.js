"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const remove_leading_slash_1 = require("../helpers/remove-leading-slash");
const absolute_link_1 = require("./absolute-link");
const unixify_1 = require("./helpers/unixify");
/**
 * AbsoluteFilePath represents a complete path from the root directory
 * to a markdown file on the local file system.
 */
class AbsoluteFilePath {
    constructor(value) {
        this.value = remove_leading_slash_1.removeLeadingSlash(unixify_1.unixify(value));
    }
    /** Returns a new file path with the given file name appended to the end of this file path */
    append(fileName) {
        return new AbsoluteFilePath(path_1.default.join(this.platformified(), fileName));
    }
    /**
     * Returns the directory that contains this file path
     */
    directory() {
        if (this.isDirectory()) {
            return this;
        }
        return new AbsoluteFilePath(path_1.default.dirname(this.value) + "/");
    }
    /**
     * Returns the file extension of this path
     */
    extName() {
        return path_1.default.extname(this.value);
    }
    /**
     * Returns whether this file path points to a directory
     */
    isDirectory() {
        return this.value.endsWith("/");
    }
    /**
     * Returns the path in the platform-specific format,
     * i.e. using '\' on Windows and '/' everywhere else
     */
    platformified() {
        return this.value.replace(/\//g, path_1.default.sep);
    }
    /**
     * Returns this absolute path using forward slashes as path separators
     */
    unixified() {
        return this.value;
    }
    /**
     * Returns the public link under which this file path is published
     * @param publications the publications of this session
     */
    publicPath(publications) {
        const publication = publications.forFilePath(this);
        if (publication == null) {
            return new absolute_link_1.AbsoluteLink(this.unixified());
        }
        return publication.publish(this);
    }
}
exports.AbsoluteFilePath = AbsoluteFilePath;
//# sourceMappingURL=absolute-file-path.js.map