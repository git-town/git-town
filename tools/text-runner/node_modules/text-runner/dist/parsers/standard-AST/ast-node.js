"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const absolute_file_path_1 = require("../../filesystem/absolute-file-path");
/** a node in the standardized Markdown/HTML AST */
class AstNode {
    constructor(data) {
        this.type = data.type;
        this.tag = data.tag;
        this.file = data.file;
        this.line = data.line;
        this.content = data.content;
        this.attributes = data.attributes;
    }
    static scaffold(data = {}) {
        if (typeof data.file === "string") {
            data.file = new absolute_file_path_1.AbsoluteFilePath(data.file);
        }
        return new AstNode({
            attributes: data.attributes || {},
            content: data.content || "",
            file: data.file || new absolute_file_path_1.AbsoluteFilePath("file"),
            line: data.line || 1,
            tag: data.tag != null ? data.tag : "tag",
            type: data.type || "type"
        });
    }
    /** Returns the type of the corresponding ending node. */
    endType() {
        if (!this.isOpeningNode()) {
            throw new Error("not an opening node");
        }
        return this.type.replace("open", "") + "close";
    }
    /**
     * Returns the content of the "href" attribute for link tags,
     * null otherwise.
     */
    htmlLinkTarget() {
        if (this.content == null) {
            return null;
        }
        if (this.type !== "htmltag") {
            return null;
        }
        const matches = this.content.match(/<a[^>]*href="([^"]*)".*?>/);
        return matches ? matches[1] : null;
    }
    /** Returns whether this AstNode is an opening node. */
    isOpeningNode() {
        return this.type.endsWith("_open");
    }
    /** Returns whether this AstNode is a closing node. */
    isClosingNode() {
        return this.type.endsWith("_close");
    }
}
exports.AstNode = AstNode;
//# sourceMappingURL=ast-node.js.map