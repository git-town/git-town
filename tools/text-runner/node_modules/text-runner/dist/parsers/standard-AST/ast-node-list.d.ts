import { AstNode } from "./ast-node";
export declare class AstNodeList extends Array<AstNode> {
    /** Creates a new AstNodeList containing an AstNode scaffoldedd from the given data */
    static scaffold(data?: any): AstNodeList;
    /**
     * Returns the AstNode matching any of the given types.
     * Only one result is expected,
     * multiple or zero matches cause an exception.
     */
    getNodeOfTypes(...nodeTypes: string[]): AstNode;
    /**
     * Assuming the given AstNode is an opening node,
     * returns all nodes until it closes.
     */
    getNodesFor(openingNode: AstNode): AstNodeList;
    /** Returns the AstNodes matching any of the given types. */
    getNodesOfTypes(...nodeTypes: string[]): AstNodeList;
    /** Returns whether this AstNodeList contains a node of the given type. */
    hasNodeOfType(nodeType: string): boolean;
    /** Returns all node types encountered in this list. */
    nodeTypes(): string[];
    /** Adds a new AstNode with the given data to this list. */
    pushNode(data: any): void;
    /** Returns the concatenated textual content of all nodes in this list. */
    text(): string;
    /** Returns the textual content for the given node. */
    textInNode(astNode: AstNode): string;
    /**
     * Returns the text in the node of the given types.
     * Expects that exactly one matching node exists,
     * throws otherwise.
     */
    textInNodeOfType(...nodeTypes: string[]): string;
    /**
     * Returns the text in the nodes of the given types.
     */
    textInNodesOfType(...nodeTypes: string[]): string[];
}
//# sourceMappingURL=ast-node-list.d.ts.map