"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = require("assert");
const absolute_file_path_1 = require("../../../filesystem/absolute-file-path");
const ast_node_list_1 = require("../../standard-AST/ast-node-list");
const tag_mapper_1 = require("../../tag-mapper");
const closing_tag_parser_1 = require("./closing-tag-parser");
suite("ClosingTagParser.isClosingTag()", function () {
    const testData = {
        "  < / a > ": true,
        "  </a> ": true,
        " < a  > ": false,
        "</a>": true,
        "<a>": false
    };
    const parser = new closing_tag_parser_1.ClosingTagParser(new tag_mapper_1.TagMapper());
    for (const [input, expected] of Object.entries(testData)) {
        test(`'${input}' --> ${expected}`, function () {
            assert_1.strict.equal(parser.isClosingTag(input), expected);
        });
    }
});
test("ClosingTagParser.parse()", function () {
    const parser = new closing_tag_parser_1.ClosingTagParser(new tag_mapper_1.TagMapper());
    const file = new absolute_file_path_1.AbsoluteFilePath("filepath");
    const line = 12;
    const actual = parser.parse("  < / a >  ", file, line);
    const expected = ast_node_list_1.AstNodeList.scaffold({
        attributes: {},
        content: "",
        file,
        line,
        tag: "/a",
        type: "anchor_close"
    });
    assert_1.strict.deepEqual(actual, expected);
});
//# sourceMappingURL=closing-tag-parser.test.js.map