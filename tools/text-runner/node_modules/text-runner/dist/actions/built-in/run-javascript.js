"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/** The "runJavascript" action runs the JavaScript code given in the code block. */
function runJavascript(args, done) {
    let code = args.nodes.textInNodeOfType("fence");
    if (code == null) {
        done(new Error("no JavaScript code found in the fenced block"));
        return;
    }
    code = replaceSubstitutions(code, args.configuration);
    code = replaceRequireLocalModule(code);
    code = replaceVariableDeclarations(code);
    // This is used in an eval'ed string below
    // @ts-ignore: unused variable
    const __finished = (err) => {
        done(err);
    };
    code = hasCallbackPlaceholder(code)
        ? (code = replaceAsyncCallbacks(code)) // async code
        : (code = appendAsyncCallback(code)); // sync code
    eval(code);
}
exports.default = runJavascript;
function appendAsyncCallback(code) {
    return `${code.trim()};\n__finished()`;
}
function replaceAsyncCallbacks(code) {
    return code.replace("<CALLBACK>", "__finished").replace(/\/\/\s*\.\.\./g, "__finished()");
}
/** replaceSubstitutions substitutes replacements configured in text-run.yml. */
function replaceSubstitutions(code, c) {
    // TODO: use optional chaining from TypeScript 3.7 once VSCode and linters can handle it
    for (const replaceData of (c.actions.runJavascript || {}).replace || []) {
        code = code.replace(replaceData.search, replaceData.replace);
    }
    return code;
}
/** replaceRequireLocalModule makes sure "require('.') works as expected even if running in a temp workspace. */
function replaceRequireLocalModule(code) {
    return code.replace(/require\(['"].['"]\)/, "require(process.cwd())");
}
/** replaceVariableDeclarations makes variable declarations persist across code blocks. */
function replaceVariableDeclarations(code) {
    return code
        .replace(/\bconst /g, "global.")
        .replace(/\bvar /g, "global.")
        .replace(/\bthis\./g, "global.");
}
/** hasCallbackPlaceholder returns whether the given code block contains a callback placeholder. */
function hasCallbackPlaceholder(code) {
    return code.indexOf("<CALLBACK>") > -1 || code.indexOf("// ...") > -1;
}
//# sourceMappingURL=run-javascript.js.map