"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assertNoDiff = __importStar(require("assert-no-diff"));
const colorette_1 = __importDefault(require("colorette"));
const eol_1 = __importDefault(require("eol"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
async function verifySourceFileContent(args) {
    const fileName = args.nodes.textInNodeOfType("strong_open");
    let relativeBaseDir = ".";
    if (args.nodes.hasNodeOfType("link_open")) {
        const linkNode = args.nodes.getNodeOfTypes("link_open");
        relativeBaseDir = linkNode.attributes.href;
    }
    const expectedContent = args.nodes.textInNodeOfType("fence");
    args.name(`verifying document content matches source code file ${colorette_1.default.cyan(fileName)}`);
    const filePath = path_1.default.join(args.configuration.sourceDir, path_1.default.dirname(args.file), relativeBaseDir, fileName);
    args.log(`ls ${filePath}`);
    let actualContent;
    try {
        actualContent = await fs_extra_1.default.readFile(filePath, "utf8");
    }
    catch (err) {
        if (err.code === "ENOENT") {
            throw new Error(`file ${colorette_1.default.cyan(fileName)} not found`);
        }
        else {
            throw err;
        }
    }
    try {
        assertNoDiff.trimmedLines(eol_1.default.lf(actualContent.trim()), eol_1.default.lf(expectedContent.trim()));
    }
    catch (err) {
        throw new Error(`mismatching content in ${colorette_1.default.cyan(colorette_1.default.bold(filePath))}:\n${err.message}`);
    }
}
exports.default = verifySourceFileContent;
//# sourceMappingURL=verify-source-file-content.js.map