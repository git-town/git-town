"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const colorette_1 = __importDefault(require("colorette"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const extract_activities_1 = require("../activity-list/extract-activities");
const instantiate_formatter_1 = require("../configuration/instantiate-formatter");
const get_filenames_1 = require("../filesystem/get-filenames");
const find_link_targets_1 = require("../link-targets/find-link-targets");
const parse_markdown_files_1 = require("../parsers/markdown/parse-markdown-files");
const execute_sequential_1 = require("../runners/execute-sequential");
const stats_counter_1 = require("../runners/helpers/stats-counter");
const create_working_dir_1 = require("../working-dir/create-working-dir");
async function dynamicCommand(config) {
    const stats = new stats_counter_1.StatsCounter();
    // step 0: create working dir
    if (!config.workspace) {
        config.workspace = await create_working_dir_1.createWorkingDir(config.useSystemTempDirectory);
    }
    // step 1: find files
    const filenames = await get_filenames_1.getFileNames(config);
    if (filenames.length === 0) {
        console.log(colorette_1.default.magenta("no Markdown files found"));
        return [];
    }
    // step 2: read and parse files
    const ASTs = await parse_markdown_files_1.parseMarkdownFiles(filenames);
    // step 3: find link targets
    const linkTargets = find_link_targets_1.findLinkTargets(ASTs);
    // step 4: extract activities
    const activities = extract_activities_1.extractActivities(ASTs, config.classPrefix);
    if (activities.length === 0) {
        console.log(colorette_1.default.magenta("no activities found"));
        return [];
    }
    // step 5: execute the ActivityList
    const formatter = instantiate_formatter_1.instantiateFormatter(config.formatterName, activities.length, config);
    process.chdir(config.workspace);
    const error = await execute_sequential_1.executeSequential(activities, config, linkTargets, stats, formatter);
    // step 6: cleanup
    process.chdir(config.sourceDir);
    if (error && !config.keepTmp) {
        await fs_extra_1.default.remove(config.workspace);
    }
    // step 7: write stats
    let text = "\n";
    let colorFn;
    if (error) {
        colorFn = colorette_1.default.red;
        text += colorette_1.default.red("1 error, ");
    }
    else {
        colorFn = colorette_1.default.green;
        text += colorette_1.default.green("Success! ");
    }
    text += colorFn(`${activities.length} activities in ${filenames.length} files`);
    text += colorFn(`, ${stats.duration()}`);
    console.log(colorette_1.default.bold(text));
    if (error) {
        return [error];
    }
    else {
        return [];
    }
}
exports.dynamicCommand = dynamicCommand;
//# sourceMappingURL=dynamic.js.map