"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const colorette_1 = __importDefault(require("colorette"));
const action_finder_1 = require("../actions/action-finder");
const extract_activities_1 = require("../activity-list/extract-activities");
const get_filenames_1 = require("../filesystem/get-filenames");
const parse_markdown_files_1 = require("../parsers/markdown/parse-markdown-files");
async function unusedCommand(config) {
    // step 1: find files
    const filenames = await get_filenames_1.getFileNames(config);
    if (filenames.length === 0) {
        console.log(colorette_1.default.magenta("no Markdown files found"));
        return;
    }
    // step 2: read and parse files
    const ASTs = await parse_markdown_files_1.parseMarkdownFiles(filenames);
    // step 3: extract activities
    const usedActivityNames = extract_activities_1.extractActivities(ASTs, config.classPrefix).map(activity => activity.actionName);
    // step 4: find defined activities
    const definedActivityNames = action_finder_1.actionFinder.customActionNames();
    // step 5: identify unused activities
    const unusedActivityNames = definedActivityNames.filter(definedActivityName => !usedActivityNames.includes(definedActivityName));
    // step 6: write results
    console.log("Unused activities:");
    for (const unusedActivityName of unusedActivityNames) {
        console.log(`- ${unusedActivityName}`);
    }
}
exports.unusedCommand = unusedCommand;
//# sourceMappingURL=unused.js.map