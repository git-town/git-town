"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const colorette_1 = __importDefault(require("colorette"));
async function helpCommand(error) {
    console.log(template(error));
}
exports.helpCommand = helpCommand;
function template(error) {
    if (error) {
        error = `${colorette_1.default.red(colorette_1.default.bold("Error: " + error))}`;
    }
    const { version } = require("../../package.json");
    return `
${colorette_1.default.dim("TextRunner " + version)}
${error || ""}
USAGE: ${colorette_1.default.bold("text-run [<options>] <command>")}

COMMANDS
  ${colorette_1.default.bold("run")} [<filename>]      runs all tests on the given file/folder or entire documentation
  ${colorette_1.default.bold("dynamic")} [<filename>]  runs only the programmatic tests, skips checking links
  ${colorette_1.default.bold("static")} [<filename>]   checks only the links, skips programmatic tests

  ${colorette_1.default.bold("setup")}                 creates an example configuration file
  ${colorette_1.default.bold("add")} <filename>        scaffolds a new block type handler
  ${colorette_1.default.bold("unused")} <filename>     shows unused custom activities

  ${colorette_1.default.bold("help")}                  shows this help screen
  ${colorette_1.default.bold("version")}               shows the currently installed version
  ${colorette_1.default.bold("debug")}                 shows debug data

OPTIONS
  ${colorette_1.default.bold("--config")}              provide a custom configuration filename
  ${colorette_1.default.bold("--offline")}             don't check external links
`;
}
//# sourceMappingURL=help.js.map