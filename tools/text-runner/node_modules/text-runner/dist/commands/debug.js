"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const extract_activities_1 = require("../activity-list/extract-activities");
const extract_images_and_links_1 = require("../activity-list/extract-images-and-links");
const get_filenames_1 = require("../filesystem/get-filenames");
const find_link_targets_1 = require("../link-targets/find-link-targets");
const parse_markdown_files_1 = require("../parsers/markdown/parse-markdown-files");
async function debugCommand(config) {
    const filenames = await get_filenames_1.getFileNames(config);
    if (filenames.length === 0) {
        return [];
    }
    console.log("AST NODES:");
    const ASTs = await parse_markdown_files_1.parseMarkdownFiles(filenames);
    for (const AST of ASTs) {
        for (const node of AST) {
            console.log(`${node.file.platformified()}:${node.line}  ${node.type} ${showAttr(node)}`);
        }
    }
    console.log("\nIMAGES AND LINKS:");
    const links = extract_images_and_links_1.extractImagesAndLinks(ASTs);
    if (links.length === 0) {
        console.log("(none)");
    }
    else {
        for (const link of links) {
            console.log(link);
        }
    }
    console.log("\nACTIVITIES:");
    const activities = extract_activities_1.extractActivities(ASTs, config.classPrefix);
    if (activities.length === 0) {
        console.log("(none)");
    }
    else {
        for (const activity of activities) {
            console.log(`${activity.file.platformified()}:${activity.line}  ${activity.actionName}`);
        }
    }
    console.log("\nLINK TARGETS:");
    const linkTargets = find_link_targets_1.findLinkTargets(ASTs);
    for (const key of Object.keys(linkTargets.targets)) {
        console.log(key, linkTargets.targets[key]);
    }
    return [];
}
exports.debugCommand = debugCommand;
function showAttr(node) {
    if (node.type === "text") {
        return `("${node.content.trim()}")`;
    }
    const keys = Object.keys(node.attributes);
    if (keys.length === 0) {
        return "";
    }
    return `(${node.attributes.textrun})`;
}
//# sourceMappingURL=debug.js.map