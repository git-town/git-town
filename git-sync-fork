#!/bin/bash

source "$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/helpers/helpers.sh"

# The path to the abort script
abort_script="/tmp/git_sync_fork_abort$temp_filename_suffix"



# Aborts a currently ongoing sync-fork
function abort_sync_fork {
  if [ -f $abort_script ]; then
    source $abort_script
    rm $abort_script
  else
    echo_red "Cannot find abort definition file"
  fi
}


# Called by pull_feature_branch when the merge fails with conflicts
function error_pull_upstream_branch {
  # Create the abort file.
  echo "git rebase --abort" > $abort_script
  echo "git checkout $initial_branch_name" >> $abort_script
  if [ $initial_open_changes == true ]; then
    echo "git stash pop" >> $abort_script
  fi

  # Show error message.
  echo
  echo
  echo_red "To abort the rebase and checkout the original branch, run 'git sync-fork --abort'."
  exit_with_error
}


# Outputs error and exits
function error_with_upstream_required {
  echo_error_header
  echo_error "Please add a remote 'upstream'"
  exit_with_error
}


# Adds a remote 'upstream' by querying GitHub to find the current repo's parent
function configure_upstream {
  local url=`remote_url origin`
  local repository=`github_parse_repository $url`
  if [ -z $repository ]; then error_with_upstream_required; fi

  local protocol
  if [[ $url =~ "https" ]]; then
    protocol='clone_url'
  else
    protocol='ssh_url'
  fi

  local upstream_url=`github_upstream_url $repository $protocol`
  if [ -z $upstream_url ]; then error_with_upstream_required; fi

  git remote add upstream $upstream_url
  echo_header "Added remote 'upstream' as $upstream_url"
}


# Sync the current branch with the upstream repository
function sync_fork {
  if [ `git remote -v | grep 'upstream' | wc -l` == 0 ]; then
    configure_upstream
  fi

  local branch_name=$(get_current_branch_name)
  stash_open_changes
  checkout_main_branch
  pull_upstream_branch
  push_branch
  checkout_branch $branch_name
  restore_open_changes
}

if [ "$1" == "--configure-only" ]; then
  configure_upstream
elif [ "$1" == "--abort" ]; then
  abort_sync_fork
else
  sync_fork
fi

exit_with_success
