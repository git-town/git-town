#!/bin/bash

source "$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/helpers/helpers.sh"


abort_script_filename=`abort_script_filename_for_command sync_fork`


# Called by pull_feature_branch when the merge fails with conflicts
function error_pull_upstream_branch {
  create_rebase_conflict_abort_script
  exit_with_abort_continue_messages 'sync-fork'
}


# Outputs error and exits
function error_with_upstream_required {
  echo_error_header
  echo_error "Please add a remote 'upstream'"
  exit_with_error
}


# Adds a remote 'upstream' by querying GitHub to find the current repo's parent
function configure_upstream {
  local url=`remote_url origin`
  local repository=`github_parse_repository $url`
  if [ -z $repository ]; then error_with_upstream_required; fi

  local protocol
  if [[ $url =~ "https" ]]; then
    protocol='clone_url'
  else
    protocol='ssh_url'
  fi

  local upstream_url=`github_upstream_url $repository $protocol`
  if [ -z $upstream_url ]; then error_with_upstream_required; fi

  git remote add upstream $upstream_url
  echo_header "Added remote 'upstream' as $upstream_url"
}


# Sync the current branch with the upstream repository
function sync_fork {
  if [ `git remote -v | grep 'upstream' | wc -l` == 0 ]; then
    configure_upstream
  fi

  local branch_name=$(get_current_branch_name)
  stash_open_changes
  checkout_main_branch
  pull_upstream_branch
  push_branch
  checkout_branch $branch_name
  restore_open_changes
}

if [ "$1" == "--configure-only" ]; then
  configure_upstream
elif [ "$1" == "--abort" ]; then
  run_abort_script
else
  sync_fork
fi

exit_with_success
