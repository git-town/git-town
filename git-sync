#!/bin/bash

# This file provides the "git sync" functionality.
#
# To handle errors, it defines a number of error handler methods.
# These methods are called automatically by the respective git helper methods
# when their operation fails.
#
# The error handlers create abort and continue scripts that are used when the
# user runs "git sync --abort" and "git sync --continue".


source "$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/helpers/helpers.sh"

# The path to the abort script
abort_script="/tmp/git_sync_abort$temp_filename_suffix"

# The path to the continue script
continue_script="/tmp/git_sync_continue$temp_filename_suffix"


# Called by pull_branch when the merge fails with conflicts on the feature branch
function error_pull_feature_branch {
  echo_red "ERROR WHILE PULLING THE FEATURE BRANCH"

  # Create the abort file.
  echo "git merge --abort" > $abort_script
  if [ $initial_open_changes == true ]; then
    echo "git stash pop" >> $abort_script
  fi

  # Create the continue file.
  echo "merge_branch $main_branch_name" > $continue_script
  echo "push_branch" >> $continue_script
  if [ $initial_open_changes == true ]; then
    echo "git stash pop" >> $continue_script
  fi

  # Show error message.
  echo "To undo this, run 'git sync --abort', or do the following steps manually:"
  cat $abort_script
  echo "To continue after you have resolved the conflict, run 'git sync --continue'"
  echo
  exit 1
}


# Called by pull_branch when the rebase fails with conflicts on the main branch
function error_pull_main_branch {
  echo_red "ERROR WHILE PULLING THE MAIN BRANCH"

  # Create the abort file.
  echo "git rebase --abort" > $abort_script
  echo "git checkout $initial_branch_name" >> $abort_script
  if [ $initial_open_changes == true ]; then
    echo "git stash pop" >> $abort_script
  fi

  # Create the continue file.
  echo "git checkout $initial_branch_name"
  echo "pull_branch" > $continue_script
  echo "merge_branch $main_branch_name" >> $continue_script
  echo "push_branch" >> $continue_script
  if [ $initial_open_changes == true ]; then
    echo "git stash pop" >> $continue_script
  fi

  # Show error message.
  echo "To undo this, run 'git sync --abort', or do the following steps manually:"
  cat $abort_script
  echo "To continue after you have resolved the conflict, run 'git sync --continue'"
  echo
  exit 1
}


# Called by merge_branch when the merge fails with merge conflicts
function error_merge_branch {
  echo_red "ERROR WHILE REBASING THE FEATURE BRANCH AGAINST THE MAIN BRANCH"

  # Create the abort file
  echo "git merge --abort" > $abort_script
  if [ $initial_open_changes == true ]; then
    echo "git stash pop" >> $abort_script
  fi

  # Create the continue file
  echo "push_branch"  > $continue_script
  if [ $initial_open_changes == true ]; then
    echo "git stash pop" >> $continue_script
  fi

  # Show error message.
  echo "To undo this, run 'git sync --abort', or do the following steps manually:"
  cat $abort_script
  echo
  exit 1
}


# Aborts a currently ongoing sync
function abort_sync {
  echo_intro "ABORTING THE PREVIOUS GIT SYNC"
  if [ -f $abort_script ]; then
    source $abort_script
    rm $abort_script
    rm $continue_script
    echo_all_done
  else
    echo_red "Cannot find abort definition file"
  fi
}


function continue_sync {
  echo_intro "CONTINUING THE PREVIOUS GIT SYNC"

  ensure_no_open_changes "You must resolve the conflicts and commit your changes before continuing the git sync".
  if [ -f $continue_script ]; then
    source $continue_script
    rm $continue_script
    rm $abort_script
    echo_all_done
  else
    echo_red "Cannot find continue definition file"
  fi
}


# Perform the sync operation
function perform_sync {
  echo_intro "SYNCING THE CURRENT BRANCH"
  stash_open_changes
  if [ $initial_branch_name == $main_branch_name ]; then
    # On the main branch
    pull_branch
    push_branch
    push_tags
  else
    # On a feature branch
    sync_main_branch
    pull_branch
    merge_branch $main_branch_name
    push_branch
  fi
  restore_open_changes
  echo_all_done
}


if [ "$1" == "--abort" ]; then
  abort_sync
elif [ "$1" == "--continue" ]; then
  continue_sync
else
  perform_sync
fi

