#!/bin/bash

# This file provides the "git sync" functionality.
#
# To handle errors, it defines a number of error handler methods.
# These methods are called automatically by the respective git helper methods
# when their operation fails.
#
# The error handlers create abort and continue scripts that are used when the
# user runs "git sync --abort" and "git sync --continue".


source "$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/helpers/helpers.sh"


abort_script=`abort_filename "sync"`
continue_script=`continue_filename "sync"`


# Called by pull_branch when the merge fails with conflicts on the feature branch
function error_pull_feature_branch {
  # Create the abort file.
  echo "git merge --abort" > $abort_script
  if [ $initial_open_changes == true ]; then
    echo "git stash pop" >> $abort_script
  fi

  # Create the continue file.
  echo "merge_branch $main_branch_name" > $continue_script
  echo "push_branch" >> $continue_script
  if [ $initial_open_changes == true ]; then
    echo "git stash pop" >> $continue_script
  fi

  # Show error message.
  echo
  echo_red "To abort the merge, run 'git sync --abort'."
  echo_red "To continue after you have resolved the conflict, run 'git sync --continue'."
  exit_with_error
}


# Called by pull_branch when the rebase fails with conflicts on the main branch
function error_pull_main_branch {
  # Create the abort file.
  echo "git rebase --abort" > $abort_script
  echo "git checkout $initial_branch_name" >> $abort_script
  if [ $initial_open_changes == true ]; then
    echo "git stash pop" >> $abort_script
  fi

  # Create the continue file.
  echo "git checkout $initial_branch_name"
  echo "pull_branch" > $continue_script
  echo "merge_branch $main_branch_name" >> $continue_script
  echo "push_branch" >> $continue_script
  if [ $initial_open_changes == true ]; then
    echo "git stash pop" >> $continue_script
  fi

  # Show error message.
  echo
  echo_red "To abort the rebase and checkout the original branch, run 'git sync --abort'."
  echo_red "To continue after you have resolved the conflict, run 'git sync --continue'."
  exit_with_error
}


# Called by merge_branch when the merge fails with merge conflicts
function error_merge_branch {
  # Create the abort file
  echo "git merge --abort" > $abort_script
  if [ $initial_open_changes == true ]; then
    echo "git stash pop" >> $abort_script
  fi

  # Create the continue file
  echo "push_branch" > $continue_script
  if [ $initial_open_changes == true ]; then
    echo "git stash pop" >> $continue_script
  fi

  # Show error message.
  echo
  echo_red "To abort the merge, run 'git sync --abort'"
  echo_red "To continue after you have resolved the conflict, run 'git sync --continue'."
  exit_with_error
}


# Perform the sync operation
function perform_sync {
  stash_open_changes
  local branch_name=`get_current_branch_name`
  if [ `is_feature_branch $branch_name` == true ]; then
    sync_main_branch
    pull_branch
    merge_branch $main_branch_name
    push_branch
  else
    pull_branch 'rebase'
    push_branch
    push_tags
  fi
  restore_open_changes
}


if [ "$1" == "--abort" ]; then
  run_abort_script
elif [ "$1" == "--continue" ]; then
  ensure_no_open_changes "You must resolve the conflicts and commit your changes before continuing the git sync".
  run_continue_script
else
  perform_sync
fi

exit_with_success
