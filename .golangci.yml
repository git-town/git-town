version: "2"
linters:
  default: all
  disable:
    - cyclop # we keep a tab on function length ourselves
    - depguard # we review our dependencies in pull requests
    - dogsled # nothing we can do about this one
    - dupl # too many false positives
    - err113 # this leads to lots of unnecessary allocations and boilerplate
    - exhaustruct # we call this separately from golangci-lint via "make lint-smoke"
    - forbidigo # Git Town prints a lot to the CLI
    - forcetypeassert
    - funlen # we keep track of this via code reviews
    - gochecknoglobals # we keep track of global variables with code reviews
    - gocognit # we keep track of this via code reviews
    - goconst # tests contain a ton of hard-coded test strings, for example branch names
    - gocyclo # we keep track of this via code reviews
    - godot # comments don't really need to read like prose, we don't use the godoc web UI
    - godox # we allow todo comments
    - inamedparam # we are okay with concise interfaces
    - lll # we aren't enforcing a line length at this point
    - maintidx # we keep complexity under check with code reviews
    - mnd # we keep track of magic numbers through code reviews
    - musttag # we document JSON serialization via unit tests
    - nakedret # not useful
    - nestif # we keep complexity under check with code reviews
    - nilnil # in our code returning nil, nil makes sense
    - nonamedreturns # they are useful in too many situations
    - nlreturn # this forces unnecessary empty lines in function bodies
    - staticcheck # we run this separately
    - usetesting # false positives
    - varnamelen # not really useful
    - wrapcheck # too many false positives for return values defined in internal packages
    - wsl # this linter creates too many false positives, our policy is to not have any empty lines in code blocks

  settings:
    ireturn:
      allow:
        - error
        - stdlib
        - github.com/git-town/git-town/v19/internal/git.FrontendRunner
        - github.com/git-town/git-town/v19/internal/git.BackendRunner
    tagliatelle:
      case:
        rules:
          json: pascal
        use-field-name: true

  exclusions:
    generated: lax
    presets:
      - comments
      - common-false-positives
      - legacy
      - std-error-handling
    rules:
      - linters:
          - err113
        text: do not define dynamic errors
      - linters:
          - gocritic
        text: 'appendAssign: append result not assigned to the same slice'
      - linters:
          - gosec
        text: Potential hardcoded credentials
      - linters:
          - ireturn
        text: github.com/git-town/git-town/v19/internal/(hosting/hostingdomain.Connector|hosting.Connector)
      - linters:
          - ireturn
        path: internal/gohacks/cache/cache.go
      - linters:
          - ireturn
        path: internal/gohacks/cache/with_previous.go
      - linters:
          - ireturn
        path: internal/gohacks/slice/first_element_or.go
      - linters:
          - predeclared
        text: package name print has same name as predeclared identifier
      - linters:
          - revive
        text: receiver name should be a reflection of its identity
      - linters:
          - revive
        text: increment-decrement
      - linters:
          - revive
        text: 'dot-imports: should not use dot imports'
      - linters:
          - staticcheck
        text: 'ST1001: should not use dot imports'
      - linters:
          - staticcheck
        text: receiver name should be a reflection of its identity
      - path: (.+)\.go$
        text: Using the variable on range scope `(input|expected)` in function literal
    paths:
      - third_party$
      - builtin$
      - examples$
formatters:
  enable:
    - gofmt
    - gofumpt
    - goimports
  exclusions:
    generated: lax
    paths:
      - third_party$
      - builtin$
      - examples$
