#!/bin/bash
source "$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/helpers/helpers.sh"


abort_script_filename=`abort_script_filename_for_command extract`


# Called when the cherry_pick fails
function error_cherry_pick {
  # Create the abort script
  add_to_abort_script "git cherry-pick --abort"
  add_to_abort_script "git checkout $initial_branch_name"
  add_to_abort_script "git branch -D $1"
  if [ $initial_open_changes == true ]; then
    add_to_abort_script "git stash pop"
  fi

  exit_with_abort_continue_messages 'extract'
}


# Called when pull_branch fails on the main branch
function error_pull_main_branch {
  create_pull_main_branch_abort_script
  exit_with_abort_continue_messages 'extract'
}


# Performs the extract operation
function perform_extract {
  local target_branch_name=$1
  local user_input=$2
  stash_open_changes
  sync_main_branch

  if [ "$user_input" == "" ]; then
    git log --oneline $main_branch_name..$initial_branch_name                 | # Get a list of all commits in the feature branch.
      awk '{ print $1 " " "\047" substr($0, index($0,$2)) "\047" " " "off" }' | # Put quotes around commit message, append ' off' to each line (required by dialog)
      tail -r                                                                 | # Reverse the order of lines.
      xargs dialog --title "Please select all commits to be extracted from the '$initial_branch_name' branch into the '$1' branch" --ok-label "Extract" --cancel-label "Abort" --checklist "" 0 0 0  2> $user_input_filename   # Ask the user for commits
    clear
  else
    echo $user_input > $user_input_filename
  fi

  if [ ! -s $user_input_filename ]; then
    echo_error_header
    echo_error "Nothing selected, aborting script."
    exit_with_error
  fi

  create_feature_branch $target_branch_name
  cherry_pick `cat $user_input_filename`

  delete_temp_file
  push_branch
  restore_open_changes
}


# Exit with a help screen if parameters are missing.
if [ -z $1 ]; then
  echo_usage_header
  echo_usage "git extract [name of the new branch to create]"
  exit_with_error
fi

ensure_on_feature_branch "You must be on a feature branch in order to extract commits."

if [ "$1" == "--abort" ]; then
  run_abort_script
else
  if [ -z $2 ]; then
    ensure_tool_installed 'dialog'
  fi
  perform_extract "$@"
fi

exit_with_success
