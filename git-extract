#!/bin/bash
source "$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/helpers/helpers.sh"


function add_steps {
  if [ "$initial_open_changes" = true ]; then
    add_step "stash_open_changes"
  fi

  add_step "checkout_main_branch"
  add_step "fetch"
  add_step "rebase_tracking_branch"
  add_step "push"
  add_step "create_and_checkout_feature_branch '$target_branch_name'"
  add_step "cherry_pick '$SHAs'"
  add_step "push"

  if [ "$initial_open_changes" = true ]; then
    add_step "restore_open_changes"
  fi
}


function ensure_has_target_branch {
  if [ -z "$target_branch_name" ]; then
    echo_error_header
    echo_error "No branch name provided."
    exit_with_error
  fi
}


function ensure_has_shas {
  if [ -z "$SHAs" ]; then
    echo_error_header
    echo_error "Nothing selected, aborting extract."
    exit_with_error
  fi
}


function preconditions {
  ensure_on_feature_branch "You must be on a feature branch in order to extract commits."
  target_branch_name=$1
  ensure_has_target_branch
  ensure_does_not_have_branch "$target_branch_name"
  shift
  get_shas "$*"
  ensure_has_shas
}


function get_shas {
  SHAs="$*"

  if [ -z "$SHAs" ]; then
    ensure_tool_installed 'dialog'
    local file=$(temp_filename)

    git log --oneline "$main_branch_name..$initial_branch_name"               | # Get a list of all commits in the feature branch.
      awk '{ print $1 " " "\047" substr($0, index($0,$2)) "\047" " " "off" }' | # Put quotes around commit message, append ' off' to each line (required by dialog)
      tail -r                                                                 | # Reverse the order of lines.
      xargs dialog --title "Please select all commits to be extracted from the '$initial_branch_name' branch into the '$target_branch_name' branch" --ok-label "Extract" --cancel-label "Abort" --checklist "" 0 0 0  2> "$file"  # Ask the user for commits
    clear

    SHAs=$(cat "$file")
    rm "$file"
  fi
}


run "$@"
