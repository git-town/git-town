#!/usr/bin/env bash
source "$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/helpers/helpers.sh"


function error_empty_commit {
  discard_open_changes
  undo_command

  echo_error_header
  echo_error "Aborting ship due to empty commit message"
  exit_with_error newline
}

function preconditions {
  if [ "$#" -gt 0 ] && [[ ! "$1" =~ ^- ]]; then
    target_branch_name=$1
    ensure_has_branch "$target_branch_name"
    shift
  else
    target_branch_name=$(get_current_branch_name)
    ensure_no_open_changes "You cannot ship with uncommitted changes."
  fi

  ensure_is_feature_branch "$target_branch_name" "Only feature branches can be shipped."
  commit_options=$(parameters_as_string "$@")
}


function steps {
  if [ "$target_branch_name" != "$INITIAL_BRANCH_NAME" ]; then
    echo_if_true "stash_open_changes" "$INITIAL_OPEN_CHANGES"
  fi

  if [ "$HAS_REMOTE" = true ]; then
    echo "checkout_main_branch"
    echo "fetch"
    echo "rebase_tracking_branch"
    echo "push"
  fi

  echo "checkout $target_branch_name"
  echo "merge_tracking_branch"
  echo "merge $MAIN_BRANCH_NAME"
  echo "ensure_has_shippable_changes"
  echo "checkout_main_branch"
  echo "squash_merge $target_branch_name"
  echo "commit_squash_merge $target_branch_name $commit_options"

  echo_if_true "push" "$HAS_REMOTE"

  if [ "$(has_tracking_branch "$target_branch_name")" = true ]; then
    echo "delete_remote_branch $target_branch_name"
  fi
  echo "delete_local_branch $target_branch_name force"

  if [ "$target_branch_name" != "$INITIAL_BRANCH_NAME" ]; then
    echo "checkout $INITIAL_BRANCH_NAME"
    echo_if_true "restore_open_changes" "$INITIAL_OPEN_CHANGES"
  fi
}


run "$@"
