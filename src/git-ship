#!/usr/bin/env bash
source "$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/helpers/helpers.sh"


function ensure_has_no_unshipped_ancestors {
  local branch_name=$1

  ensure_knows_parent_branches "$branch_name"
  if [ "$(parent_branch "$branch_name")" != "$MAIN_BRANCH_NAME" ]; then
    local ancestors_without_main="$(ancestor_branches "$branch_name" | cut -d ' ' -f 2-)"
    local ancestors_list="\"${ancestors_without_main// /", "}\""
    local oldest_ancestor="$(echo "$ancestors_without_main" | cut -d ' ' -f 1)"

    echo_error_header
    echo_error "Shipping this branch would ship $ancestors_list as well."
    echo_error "Please ship \"$oldest_ancestor\" first."
    exit_with_error newline
  fi
}


function error_empty_commit {
  discard_open_changes
  undo_command

  echo_error_header
  echo_error "Ship aborted because commit exited with error"
  exit_with_error newline
}


function preconditions {
  if [ "$#" -gt 0 ] && [[ ! "$1" =~ ^- ]]; then
    target_branch_name=$1
    if [ "$HAS_REMOTE" = true ]; then
      fetch
    fi
    ensure_has_branch "$target_branch_name"
    shift
  else
    target_branch_name=$(get_current_branch_name)
    ensure_no_open_changes "You cannot ship with uncommitted changes."
  fi

  ensure_is_feature_branch "$target_branch_name" "Only feature branches can be shipped."
  ensure_has_no_unshipped_ancestors "$target_branch_name"
  commit_options=$(parameters_as_string "$@")

  if [ "$target_branch_name" != "$INITIAL_BRANCH_NAME" ]; then
    export STASH_OPEN_CHANGES=true
  fi

  export RUN_IN_GIT_ROOT=true
}


function steps {
  if [ "$HAS_REMOTE" = true ]; then
    echo "fetch"
    sync_branch_steps "$MAIN_BRANCH_NAME"
  fi

  echo "checkout $target_branch_name"
  echo "merge_tracking_branch"
  echo "merge $MAIN_BRANCH_NAME"
  echo "ensure_has_shippable_changes"
  echo "checkout_main_branch"
  echo "squash_merge $target_branch_name"
  echo "commit_squash_merge $target_branch_name $commit_options"

  echo_if_true "push_branch $MAIN_BRANCH_NAME" "$HAS_REMOTE"

  if [ "$(has_tracking_branch "$target_branch_name")" = true ] &&
     [ "$(has_child_branches "$target_branch_name")" = false ]; then
    echo "delete_remote_branch $target_branch_name"
  fi
  echo "delete_local_branch $target_branch_name force"

  # update branch hierarchy information
  echo "delete_parent_entry $target_branch_name"
  echo_update_child_branches "$target_branch_name" "$MAIN_BRANCH_NAME"
  echo "delete_all_ancestor_entries"

  if [ "$target_branch_name" != "$INITIAL_BRANCH_NAME" ]; then
    echo "checkout $INITIAL_BRANCH_NAME"
  fi
}


run "$@"
