#!/usr/bin/env bash
source "$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/helpers/helpers.sh"


function branches_to_sync {
  if [ "$sync_all" = true ]; then
    echo "$MAIN_BRANCH_NAME"
    local_branches_without_main
  elif [ "$(is_feature_branch "$INITIAL_BRANCH_NAME")" = true ]; then
    echo "$MAIN_BRANCH_NAME"
    echo "$INITIAL_BRANCH_NAME"
  else
    echo "$INITIAL_BRANCH_NAME"
  fi
}


function preconditions {
  if [ "$HAS_REMOTE" = true ]; then
    fetch
  fi

  should_push_tags=false
  sync_all=false

  if [ "$1" = "--all" ]; then
    sync_all=true
  elif [ "$(is_feature_branch "$INITIAL_BRANCH_NAME")" = false ]; then
    should_push_tags=true
  fi
}


function skip_message_prefix {
  echo "To skip the sync of the '$(get_current_branch_name)' branch"
}


function skippable {
  if [ "$(rebase_in_progress)" = true ] && [ "$(get_current_branch_name)" = "$MAIN_BRANCH_NAME" ]; then
    echo false
  else
    echo true
  fi
}


function steps {
  echo_if_true "change_directory $(git_root)" "$IN_SUB_FOLDER"
  echo_if_true "stash_open_changes" "$INITIAL_OPEN_CHANGES"

  branches_to_sync | while read branch_name; do
    local is_feature="$(is_feature_branch "$branch_name")"

    # If there is a remote origin, then checkout and sync all branches because
    # there may be changes to non-feature branches, otherwise only sync feature
    # branches because non-feature branches will not need syncing
    if [ "$HAS_REMOTE" = true ] || [ "$is_feature" = true ]; then
      echo "checkout $branch_name"

      if [ "$is_feature" = true ]; then
        echo "merge_tracking_branch"
        echo "merge $MAIN_BRANCH_NAME"
      else
        echo "rebase_tracking_branch"
      fi

      echo_if_true "push" "$HAS_REMOTE"
    fi
  done

  if [ "$HAS_REMOTE" = true ] && [ "$should_push_tags" = true ]; then
    echo "push_tags"
  fi

  echo "checkout $INITIAL_BRANCH_NAME"

  echo_if_true "restore_open_changes" "$INITIAL_OPEN_CHANGES"
  echo_if_true "change_directory $INITIAL_DIRECTORY" "$IN_SUB_FOLDER"
}


run "$@"
