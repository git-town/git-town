#!/usr/bin/env bash
source "$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/helpers/helpers.sh"


# Echoes the names of all branches that should be synced in the current session
function branches_to_sync {
  if [ "$sync_target" = "all branches" ]; then
    local_branches_with_main_first
  elif [ "$sync_target" = "feature branch" ]; then
    ancestor_branches "$INITIAL_BRANCH_NAME" | tr ' ' '\n'
    echo "$INITIAL_BRANCH_NAME"
  elif [ "$sync_target" = "perennial branch" ]; then
    echo "$INITIAL_BRANCH_NAME"
  else
    echo_error_header "Unknown sync target"
    exit_with_error
  fi
}


function preconditions {
  if [ "$HAS_REMOTE" = true ]; then
    fetch
  fi

  should_push_tags=false
  sync_target=""

  if [ "$1" = "--all" ]; then
    sync_target="all branches"
    should_push_tags=true
    local branches="$(local_branches_without_main | tr '\n' ' ')"
    ensure_knows_parent_branches "$branches"
  elif [ "$(is_feature_branch "$INITIAL_BRANCH_NAME")" = true ]; then
    sync_target="feature branch"
    ensure_knows_parent_branches "$INITIAL_BRANCH_NAME"
  else
    sync_target="perennial branch"
    should_push_tags=true
  fi

  export RUN_IN_GIT_ROOT=true
  export STASH_OPEN_CHANGES=true
}


function skip_message_prefix {
  echo "To skip the sync of the '$(get_current_branch_name)' branch"
}


function skippable {
  if [ "$(rebase_in_progress)" = true ] && [ "$(get_current_branch_name)" = "$MAIN_BRANCH_NAME" ]; then
    echo false
  else
    echo true
  fi
}


function steps {
  branches_to_sync | while read branch_name; do
    sync_branch_steps "$branch_name"
  done

  echo "checkout $INITIAL_BRANCH_NAME"

  if [ "$HAS_REMOTE" = true ] && [ "$should_push_tags" = true ]; then
    echo "push_tags"
  fi
}


run "$@"
