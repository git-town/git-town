#!/usr/bin/env bash
base_dir=$( dirname "${BASH_SOURCE[0]}" )
source "$( cd "$base_dir" && pwd )/helpers/helpers.sh" --bypass-automatic-configuration --bypass-environment-checks


# Installs the autocompletion definition for Fish shell
function install_fish_autocompletion {

  # Determine the Git Town source code directory that contains the autocompletion data
  local autocomplete_folder=$( cd "$base_dir/../autocomplete" && pwd )

  # Optionally create the autocompeletion folder for Fish shell
  if [ ! -d ~/.config/fish/completions ]; then
    run_command "mkdir -p ~/.config/fish/completions"
  fi

  # Ensure there are no existing autocompletions for Fish shell
  if [ -e ~/.config/fish/completions/git.fish ] || [ -h ~/.config/fish/completions/git.fish ]; then
    echo_inline_error 'Git autocompletion for Fish shell already exists'
    echo_inline_error 'Operation aborted'
    exit_with_error
  fi

  run_command "ln -s $autocomplete_folder/git.fish ~/.config/fish/completions/git.fish"
}


function show_help {
  man git-town
}


function show_version {
  local version="0.7.1"
  if [ "$(is_git_town_installed_manually)" == true ]; then
    version="$version $(git_town_revision)"
  fi

  echo "Git Town $version"
}


if [ "$1" == "config" ]; then
  ensure_git_repository
  shift
  run_config_operation "$@"
elif [ "$1" == "main-branch" ]; then
  ensure_git_repository
  shift
  show_or_update_main_branch "$@"
elif [ "$1" == "perennial-branches" ]; then
  ensure_git_repository
  shift
  show_or_update_perennial_branches "$@"
elif [ "$1" == "version" ]; then
  show_version
elif [ "$1" == "install-fish-autocompletion" ]; then
  install_fish_autocompletion
elif [ -z "$1" ] || [ "$1" == "help" ]; then
  show_help
elif [ -n "$1" ]; then
  echo_inline_error "unsupported subcommand '$1'"
  echo_inline_usage "git town"
  echo_inline_usage_or "git town config [--reset | --setup]"
  echo_inline_usage_or "git town help"
  echo_inline_usage_or "git town install-fish-autocompletion"
  echo_inline_usage_or "git town main-branch [<branch_name>]"
  echo_inline_usage_or "git town perennial-branches [(--add | --remove) <branch_name>]"
  echo_inline_usage_or "git town version"
  exit_with_error newline
fi
