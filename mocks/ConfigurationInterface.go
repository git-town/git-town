// Code generated by mockery v2.0.0-alpha.2. DO NOT EDIT.

package mocks

import (
	command "github.com/git-town/git-town/src/command"

	mock "github.com/stretchr/testify/mock"
)

// ConfigurationInterface is an autogenerated mock type for the ConfigurationInterface type
type ConfigurationInterface struct {
	mock.Mock
}

// AddGitAlias provides a mock function with given fields: _a0
func (_m *ConfigurationInterface) AddGitAlias(_a0 string) *command.Result {
	ret := _m.Called(_a0)

	var r0 *command.Result
	if rf, ok := ret.Get(0).(func(string) *command.Result); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*command.Result)
		}
	}

	return r0
}

// AddToPerennialBranches provides a mock function with given fields: branchNames
func (_m *ConfigurationInterface) AddToPerennialBranches(branchNames ...string) *command.Result {
	_va := make([]interface{}, len(branchNames))
	for _i := range branchNames {
		_va[_i] = branchNames[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *command.Result
	if rf, ok := ret.Get(0).(func(...string) *command.Result); ok {
		r0 = rf(branchNames...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*command.Result)
		}
	}

	return r0
}

// DeleteMainBranchConfiguration provides a mock function with given fields:
func (_m *ConfigurationInterface) DeleteMainBranchConfiguration() {
	_m.Called()
}

// DeleteParentBranch provides a mock function with given fields: branchName
func (_m *ConfigurationInterface) DeleteParentBranch(branchName string) {
	_m.Called(branchName)
}

// DeletePerennialBranchConfiguration provides a mock function with given fields:
func (_m *ConfigurationInterface) DeletePerennialBranchConfiguration() {
	_m.Called()
}

// EnsureIsFeatureBranch provides a mock function with given fields: branchName, errorSuffix
func (_m *ConfigurationInterface) EnsureIsFeatureBranch(branchName string, errorSuffix string) {
	_m.Called(branchName, errorSuffix)
}

// GetAncestorBranches provides a mock function with given fields: branchName
func (_m *ConfigurationInterface) GetAncestorBranches(branchName string) []string {
	ret := _m.Called(branchName)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(branchName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GetChildBranches provides a mock function with given fields: branchName
func (_m *ConfigurationInterface) GetChildBranches(branchName string) []string {
	ret := _m.Called(branchName)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(branchName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GetCodeHostingDriverName provides a mock function with given fields:
func (_m *ConfigurationInterface) GetCodeHostingDriverName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetCodeHostingOriginHostname provides a mock function with given fields:
func (_m *ConfigurationInterface) GetCodeHostingOriginHostname() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetGitAlias provides a mock function with given fields: _a0
func (_m *ConfigurationInterface) GetGitAlias(_a0 string) string {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetGitHubToken provides a mock function with given fields:
func (_m *ConfigurationInterface) GetGitHubToken() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetGiteaToken provides a mock function with given fields:
func (_m *ConfigurationInterface) GetGiteaToken() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetMainBranch provides a mock function with given fields:
func (_m *ConfigurationInterface) GetMainBranch() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetParentBranch provides a mock function with given fields: branchName
func (_m *ConfigurationInterface) GetParentBranch(branchName string) string {
	ret := _m.Called(branchName)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(branchName)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetParentBranchMap provides a mock function with given fields:
func (_m *ConfigurationInterface) GetParentBranchMap() map[string]string {
	ret := _m.Called()

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// GetPerennialBranches provides a mock function with given fields:
func (_m *ConfigurationInterface) GetPerennialBranches() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GetPullBranchStrategy provides a mock function with given fields:
func (_m *ConfigurationInterface) GetPullBranchStrategy() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetRemoteOriginURL provides a mock function with given fields:
func (_m *ConfigurationInterface) GetRemoteOriginURL() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetURLHostname provides a mock function with given fields: url
func (_m *ConfigurationInterface) GetURLHostname(url string) string {
	ret := _m.Called(url)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(url)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetURLRepositoryName provides a mock function with given fields: url
func (_m *ConfigurationInterface) GetURLRepositoryName(url string) string {
	ret := _m.Called(url)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(url)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// HasBranchInformation provides a mock function with given fields:
func (_m *ConfigurationInterface) HasBranchInformation() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// HasParentBranch provides a mock function with given fields: branchName
func (_m *ConfigurationInterface) HasParentBranch(branchName string) bool {
	ret := _m.Called(branchName)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(branchName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsAncestorBranch provides a mock function with given fields: branchName, ancestorBranchName
func (_m *ConfigurationInterface) IsAncestorBranch(branchName string, ancestorBranchName string) bool {
	ret := _m.Called(branchName, ancestorBranchName)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(branchName, ancestorBranchName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsFeatureBranch provides a mock function with given fields: branchName
func (_m *ConfigurationInterface) IsFeatureBranch(branchName string) bool {
	ret := _m.Called(branchName)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(branchName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsMainBranch provides a mock function with given fields: branchName
func (_m *ConfigurationInterface) IsMainBranch(branchName string) bool {
	ret := _m.Called(branchName)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(branchName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsOffline provides a mock function with given fields:
func (_m *ConfigurationInterface) IsOffline() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsPerennialBranch provides a mock function with given fields: branchName
func (_m *ConfigurationInterface) IsPerennialBranch(branchName string) bool {
	ret := _m.Called(branchName)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(branchName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Reload provides a mock function with given fields:
func (_m *ConfigurationInterface) Reload() {
	_m.Called()
}

// RemoveFromPerennialBranches provides a mock function with given fields: branchName
func (_m *ConfigurationInterface) RemoveFromPerennialBranches(branchName string) {
	_m.Called(branchName)
}

// RemoveGitAlias provides a mock function with given fields: _a0
func (_m *ConfigurationInterface) RemoveGitAlias(_a0 string) *command.Result {
	ret := _m.Called(_a0)

	var r0 *command.Result
	if rf, ok := ret.Get(0).(func(string) *command.Result); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*command.Result)
		}
	}

	return r0
}

// RemoveLocalGitConfiguration provides a mock function with given fields:
func (_m *ConfigurationInterface) RemoveLocalGitConfiguration() {
	_m.Called()
}

// RemoveOutdatedConfiguration provides a mock function with given fields:
func (_m *ConfigurationInterface) RemoveOutdatedConfiguration() {
	_m.Called()
}

// SetCodeHostingDriver provides a mock function with given fields: value
func (_m *ConfigurationInterface) SetCodeHostingDriver(value string) *command.Result {
	ret := _m.Called(value)

	var r0 *command.Result
	if rf, ok := ret.Get(0).(func(string) *command.Result); ok {
		r0 = rf(value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*command.Result)
		}
	}

	return r0
}

// SetCodeHostingOriginHostname provides a mock function with given fields: value
func (_m *ConfigurationInterface) SetCodeHostingOriginHostname(value string) *command.Result {
	ret := _m.Called(value)

	var r0 *command.Result
	if rf, ok := ret.Get(0).(func(string) *command.Result); ok {
		r0 = rf(value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*command.Result)
		}
	}

	return r0
}

// SetColorUI provides a mock function with given fields: value
func (_m *ConfigurationInterface) SetColorUI(value string) *command.Result {
	ret := _m.Called(value)

	var r0 *command.Result
	if rf, ok := ret.Get(0).(func(string) *command.Result); ok {
		r0 = rf(value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*command.Result)
		}
	}

	return r0
}

// SetMainBranch provides a mock function with given fields: branchName
func (_m *ConfigurationInterface) SetMainBranch(branchName string) *command.Result {
	ret := _m.Called(branchName)

	var r0 *command.Result
	if rf, ok := ret.Get(0).(func(string) *command.Result); ok {
		r0 = rf(branchName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*command.Result)
		}
	}

	return r0
}

// SetNewBranchPush provides a mock function with given fields: value, global
func (_m *ConfigurationInterface) SetNewBranchPush(value bool, global bool) *command.Result {
	ret := _m.Called(value, global)

	var r0 *command.Result
	if rf, ok := ret.Get(0).(func(bool, bool) *command.Result); ok {
		r0 = rf(value, global)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*command.Result)
		}
	}

	return r0
}

// SetOffline provides a mock function with given fields: value
func (_m *ConfigurationInterface) SetOffline(value bool) *command.Result {
	ret := _m.Called(value)

	var r0 *command.Result
	if rf, ok := ret.Get(0).(func(bool) *command.Result); ok {
		r0 = rf(value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*command.Result)
		}
	}

	return r0
}

// SetParentBranch provides a mock function with given fields: branchName, parentBranchName
func (_m *ConfigurationInterface) SetParentBranch(branchName string, parentBranchName string) *command.Result {
	ret := _m.Called(branchName, parentBranchName)

	var r0 *command.Result
	if rf, ok := ret.Get(0).(func(string, string) *command.Result); ok {
		r0 = rf(branchName, parentBranchName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*command.Result)
		}
	}

	return r0
}

// SetPerennialBranches provides a mock function with given fields: branchNames
func (_m *ConfigurationInterface) SetPerennialBranches(branchNames []string) *command.Result {
	ret := _m.Called(branchNames)

	var r0 *command.Result
	if rf, ok := ret.Get(0).(func([]string) *command.Result); ok {
		r0 = rf(branchNames)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*command.Result)
		}
	}

	return r0
}

// SetPullBranchStrategy provides a mock function with given fields: strategy
func (_m *ConfigurationInterface) SetPullBranchStrategy(strategy string) *command.Result {
	ret := _m.Called(strategy)

	var r0 *command.Result
	if rf, ok := ret.Get(0).(func(string) *command.Result); ok {
		r0 = rf(strategy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*command.Result)
		}
	}

	return r0
}

// SetShouldShipDeleteRemoteBranch provides a mock function with given fields: value
func (_m *ConfigurationInterface) SetShouldShipDeleteRemoteBranch(value bool) *command.Result {
	ret := _m.Called(value)

	var r0 *command.Result
	if rf, ok := ret.Get(0).(func(bool) *command.Result); ok {
		r0 = rf(value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*command.Result)
		}
	}

	return r0
}

// SetShouldSyncUpstream provides a mock function with given fields: value
func (_m *ConfigurationInterface) SetShouldSyncUpstream(value bool) *command.Result {
	ret := _m.Called(value)

	var r0 *command.Result
	if rf, ok := ret.Get(0).(func(bool) *command.Result); ok {
		r0 = rf(value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*command.Result)
		}
	}

	return r0
}

// SetTestOrigin provides a mock function with given fields: value
func (_m *ConfigurationInterface) SetTestOrigin(value string) {
	_m.Called(value)
}

// ShouldNewBranchPush provides a mock function with given fields:
func (_m *ConfigurationInterface) ShouldNewBranchPush() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ShouldNewBranchPushGlobal provides a mock function with given fields:
func (_m *ConfigurationInterface) ShouldNewBranchPushGlobal() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ShouldShipDeleteRemoteBranch provides a mock function with given fields:
func (_m *ConfigurationInterface) ShouldShipDeleteRemoteBranch() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ShouldSyncUpstream provides a mock function with given fields:
func (_m *ConfigurationInterface) ShouldSyncUpstream() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ValidateIsOnline provides a mock function with given fields:
func (_m *ConfigurationInterface) ValidateIsOnline() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// localConfigKeysMatching provides a mock function with given fields: toMatch
func (_m *ConfigurationInterface) localConfigKeysMatching(toMatch string) []string {
	ret := _m.Called(toMatch)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(toMatch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}
