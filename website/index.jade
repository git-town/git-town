doctype
html
  head
    != partial("_partials/meta")
    link(rel="stylesheet", href="css/application.css")
    link(href='http://fonts.googleapis.com/css?family=Oleo+Script|Open+Sans:400,300,700', rel='stylesheet', type='text/css')
    link(rel="stylesheet", href="http://code.ionicframework.com/ionicons/2.0.1/css/ionicons.min.css")
    link(rel="alternate", type="application/rss+xml", title="RSS", href="https://github.com/Originate/git-town/releases.atom")

  body.index
    != partial("_partials/header")

    section.hero
      .container
        .left
          h2.
            High-level <br>
            command line interface
            for Git
          p.
            Git Town is an open-source Git plugin.<br>
            It adds Git commands
            that make collaborative software development
            more efficient and safe.

          .buttons
            a.button.learn-more(href="/install.html") Install
            a.button.commands(href="https://github.com/Originate/git-town#commands") See the Commands

        iframe.intro-video(width="550" height="300" src="https://www.youtube.com/embed/oLaUsUlFfTo" frameborder="0" allowfullscreen)

    section.tagline
      h2 A workflow layer on top of vanilla Git
      p
        a(href="https://git-scm.com" target="_blank") Git
        |  is a great <i>foundation</i> for source code management. It provides all required pieces of functionality,
        | and supports many different ways of using it equally well.

      p.
        It is intentionally generic and basic, though.
        Using it properly as a developer is cumbersome and repetitive.
        For example, correctly merging a finished feature branch requires
        up to <a href="https://github.com/Originate/git-town/blob/217f31e633d400d3eefed94f86b35a10838f1ebe/features/git-ship/supplied_branch/feature_branch/with_tracking_branch.feature#L19-L33">
        <strong>15</strong></a> individual Git commands!

      p.
        Git Town adds a layer of high-level commands to Git.
        They perform typical development workflow operations
        like creating or shipping feature branches,
        similar to how an expert Git user would do it.
        All while being as generic and unopinionated as Git.

      .buttons
        a.button.view-more(href="https://youtu.be/quYrf9ssi1A" target="_blank") View screencast
        a.button.learn-more(href="/tutorial.html") view tutorial


    section.commands
      h2
        span.powerful Powerful commands
      p.
        Git Town adds a number of high-level Git commands that automate
        typical operations in the software development workflow.

      .commands.container
        a(href="https://github.com/Originate/git-town/blob/master/documentation/commands/hack.md" target="_blank")
          .command
            h3 $ git town-hack
            p Cuts a new up-to-date feature branch off the main branch.
        a(href="https://github.com/Originate/git-town/blob/master/documentation/commands/sync.md" target="_blank")
          .command
            h3 $ git town-sync
            p Updates your current branch with all ongoing changes.
        a(href="https://github.com/Originate/git-town/blob/master/documentation/commands/new-pull-request.md" target="_blank")
          .command
            h3 $ git town-new-pull-request
            p Create a new pull request on GitHub or BitBucket for your current branch.
        a(href="https://github.com/Originate/git-town/blob/master/documentation/commands/ship.md" target="_blank")
          .command
            h3 $ git town-ship
            p Delivers your completed feature branch and removes it.
      a.button.view-more(href="https://github.com/Originate/git-town#commands") View all commands

    section.faq
      h2 FAQ
      h3 Does this force me into any conventions for my branches or commits?
      p.
        Not at all.
        Git Town doesn’t require or enforce any particular naming convention or branch setup.
        It works with a wide variety of Git branching models and workflows.

      h3 Which Git branching models are supported by Git Town?
      p
        | Git Town is so generic that it supports all the branching models that we are aware of,
        | amongst others
        | <a href="http://scottchacon.com/2011/08/31/github-flow.html" target="_blank">GitHub Flow</a>,
        | <a href="https://www.atlassian.com/git/tutorials/comparing-workflows/feature-branch-workflow" target="_blank">Git Flow</a>,
        | <a href="https://about.gitlab.com/2014/09/29/gitlab-flow" target="_blank">GitLab Flow</a>,
        | or even committing straight into the master branch!

      h3 How is this different from Git Flow?
      p.
        Git Flow is a Git extension that provides specific and opinionated support
        for the powerful Git branching model with the same name.
        It doesn’t care too much about how you keep your work in sync with the rest of the team.

      p.
        Git Town doesn’t care which branching model you use.
        It focusses on keeping your team synchronized and your code repository clean.

      p.
        It is possible (and encouraged) to use the two tools together.

      h3 Is it compatible with my other Git tools?
      p
        | Yes, we try to be good citizens.
        | If you run into any issues with your setup, please
        | <a href="https://github.com/Originate/git-town/issues/new" target="_blank">let&nbsp;us&nbsp;know</a>!

      .buttons
        a.button.learn-more(href="/install.html") Install
        a.button.twitter.ion-social-twitter(href="https://twitter.com/GitTown" target="_blank") Ask a question

    section.town
      img(src="img/git-town-town.svg")
